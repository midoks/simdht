// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/README.md
// ../../../templates/base/footer.tmpl
// ../../../templates/base/head.tmpl
// ../../../templates/corner/recommend.tmpl
// ../../../templates/index.tmpl
// ../../../templates/search/index.tmpl
// ../../../templates/search/info.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\xc9\x80\xb8\x38\x0a\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcc\xb1\x0e\xc2\x20\x10\x00\xd0\x9d\xaf\x30\xdd\xcb\xc9\x4e\xf1\x2f\xdc\xaf\x94\xa4\x10\xe9\xe1\xdd\x69\x42\x9a\xfe\xbb\x83\xb3\x31\xd1\x0f\x78\xcf\x4b\xe4\xdc\xf4\x24\x1c\xa7\x01\x44\x51\x73\x84\x22\x50\xee\x8f\xc4\x7d\x74\xd6\x39\x7b\xb6\x35\x6f\xb6\xc8\xe5\x39\xed\xfb\x35\xb1\x64\xda\x8e\x63\x08\x1e\xde\x38\x98\x4f\xcb\x4c\xa4\xa2\x8c\xed\xff\x61\xd4\xde\x12\xae\x09\x97\x9f\xaf\x8a\x5f\xa0\xf1\x30\xd3\xd2\x83\xf1\xb0\x6a\xbd\x85\x57\x00\x00\x00\xff\xff\xc8\x7e\xb4\x50\x1d\x01\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x6f\x6f\xdb\xb6\x13\x7e\xaf\x4f\x41\xeb\x17\x44\xd4\xcf\x91\xe4\x14\xc3\x50\x20\xa6\x83\xc2\xcd\x80\x62\x03\xd6\x75\x49\xb1\x21\x48\x07\x86\x3a\x49\x9c\x29\x52\x23\x4f\x52\x0c\xd7\xdf\x7d\xa0\x64\x6d\x76\x32\x6c\x1d\xa6\x37\x12\xef\xcf\x73\xcf\xdd\x73\xd4\x72\xf6\xf6\xfb\xf5\xed\xcf\xef\x6f\x48\x85\xb5\x5a\x05\xcb\xe9\x05\x3c\x5f\x05\xcb\x1a\x90\x93\x0a\xb1\x49\xe0\xb7\x56\x76\x2c\x5c\x1b\x8d\xa0\x31\xb9\xdd\x36\x10\x12\x31\x9e\x58\x88\xf0\x84\x99\x4f\xbd\x22\xa2\xe2\xd6\x01\xb2\xbb\xdb\x6f\x92\xd7\x21\xc9\xfe\x0a\xe5\xa7\xe4\xee\x4d\xb2\x36\x75\xc3\x51\x3e\xaa\x63\xa0\x77\x37\x0c\xf2\x12\xc2\xbf\xab\xfd\x1d\xd7\x65\xcb\xcb\xe3\x34\xa1\x7d\xc6\x2c\x49\x1a\x91\x24\xe3\x17\x19\x01\x34\xaf\x81\x85\x9d\x84\xbe\x31\x16\x8f\x52\x7a\x99\x63\xc5\x72\xe8\xa4\x80\x64\x38\x5c\x10\xa9\x25\x4a\xae\x12\x27\xb8\x02\x76\x99\x2e\x2e\x48\x2d\xb5\xac\xdb\xfa\xc4\xc4\x9f\x9e\x9b\x5a\x07\x76\x38\xf3\x47\x05\x4c\x9b\x70\x45\x26\x1e\xf5\xf0\xf1\xaf\xb9\x9c\x22\x6e\xc1\x5d\xbc\x24\xf7\x92\xc8\x0b\x1e\xd9\x2a\x08\x96\x28\x51\xc1\xca\xc9\x3a\xaf\x70\x99\x8d\xa7\x13\x4a\x1b\xd8\xf6\xc6\xe6\xee\x88\x52\x78\x1a\x91\x83\x13\x56\x36\x28\x8d\x7e\x16\xa4\xa4\xde\x90\xca\x42\xc1\xc2\xcc\x21\x47\x29\x32\xe1\x5c\xf6\x68\x0c\x3a\xb4\xbc\x49\x6b\xa9\x53\xe1\xdc\x75\xc7\x76\xbb\x8f\x60\x9d\x34\x7a\xbf\x0f\x89\x05\xc5\x42\x87\x5b\x05\xae\x02\xc0\x2f\x81\x4a\xb0\x82\x1a\xfe\x3b\x60\xcd\xbf\x14\x21\x58\x66\x87\x9b\xf0\x68\xf2\xed\x2a\x08\x82\xe5\x38\x07\x82\xdb\x06\x0e\x7b\xff\x2b\xef\xf8\x68\xf5\x19\x67\x34\x4a\x9f\x12\x57\x18\x5b\x47\x71\xea\xda\xc7\x5a\x22\x2d\x5a\x2d\xfc\xec\x28\xc4\xbb\x80\x10\x42\x20\x6d\x2c\x74\xa0\xf1\x2d\x14\xbc\x55\x48\xe3\xab\xc1\xde\x71\x4b\x36\x3d\x61\x64\x84\xd9\xf4\x51\x9c\x76\x5c\x4d\xee\xc1\x15\xed\x76\xe9\xb7\xfd\x7e\x1f\x5d\x05\x83\x51\x16\x84\x6e\xfa\x54\x81\x2e\xb1\x5a\xb2\xcb\x43\x09\xff\xf4\x52\xe7\xa6\x4f\xb9\x02\x8b\x34\x7a\x83\x44\x01\x77\x48\x5e\x91\x41\xee\xd9\x6c\x16\x1d\x80\xfd\x63\x01\x5b\xab\x49\xc1\x95\x83\xd1\xba\x1f\x0b\x08\xa3\x9d\x51\x90\x2a\x53\xd2\x4d\x1f\xff\x51\x96\xce\x36\xfd\x51\xb1\x23\xca\x85\x11\xad\xa3\xff\x80\x3d\xf5\xdb\x5a\xe5\xbb\xca\x5c\x16\x91\x39\x01\x2d\x4c\x0e\x77\x1f\xde\xf9\xff\x83\xd1\xa0\xd1\xd7\x24\x73\x12\x65\x62\x91\x15\x8b\xec\x32\xf5\x3f\x9a\x68\x44\x39\x34\xa8\x8c\xe0\x7e\xbe\x84\x79\xb4\xd1\x75\x5a\x72\xef\x69\x07\x93\x0e\xc4\x81\x02\x81\x6b\x8e\x50\x1a\xbb\xa5\x5e\xcd\x43\x27\x67\x34\xfa\x5f\x21\x75\xfe\x8b\x38\x38\xa3\x38\xf5\x32\x8f\x31\x7f\xaa\xd4\x11\x46\xa6\xb2\xa9\xdf\xb1\xd4\x35\x4a\x22\x8d\xae\xa7\x99\x9e\x78\x09\x23\xdd\xfd\xe2\x61\x1e\x5d\x4f\xb8\x2c\x9a\x7b\xc8\x31\xf6\xfd\xc7\xf5\x3a\x75\x80\x6b\x63\x36\x12\x68\x74\xca\xe0\x62\x58\xb7\x0b\xf2\xfa\xeb\xaf\x16\x8b\xf8\x2a\xd8\x1f\x75\x52\x02\xfe\xd0\x82\xdd\xfe\x88\x56\xea\x92\xfa\xeb\x3a\x69\xe2\x69\x5a\x28\x09\x23\x1a\x7a\xf2\x01\xca\x9b\xa7\x86\x86\xf4\xd3\xe7\xf3\x38\x9c\x0f\x17\x9b\xcc\x43\x46\xef\x3f\x9d\x3f\xfc\x3f\xa6\xe7\x9f\xcf\xe2\x70\x92\x6c\x48\x25\xec\xf9\x7c\x53\x07\xdc\x8a\xca\xaf\xb5\x43\x4b\x2f\xe3\xb4\xe6\x28\x2a\x6a\xa1\x9c\x32\x65\x41\xed\x8c\xe9\x56\xa9\xa3\xd5\x38\x68\xd1\x6a\x70\x82\x37\x40\xed\xfd\xab\x87\xf8\x6a\x32\xfb\xe0\x43\xf6\xde\xf7\xb6\xcc\xc6\xeb\xb4\xfa\x3d\x00\x00\xff\xff\x2f\x57\xaf\x23\x9e\x06\x00\x00"

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cornerRecommendTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func cornerRecommendTmplBytes() ([]byte, error) {
	return bindataRead(
		_cornerRecommendTmpl,
		"corner/recommend.tmpl",
	)
}

func cornerRecommendTmpl() (*asset, error) {
	bytes, err := cornerRecommendTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "corner/recommend.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x6e\x9c\x30\x10\xc6\xef\x3c\x85\x3b\x97\x9c\x1c\x67\xd3\x56\xca\x01\x7c\x4a\xd5\x3f\x52\xa4\x4a\x8d\x7a\x37\x66\x0c\xd6\x1a\x0f\xc2\x66\xb3\x51\x94\x77\xaf\xa0\xb0\x59\x76\xd9\x6c\xf6\x04\x33\xf3\xf1\x63\xec\x6f\xec\x97\x97\x88\x75\xe3\x54\x44\x06\xb9\x0a\x28\x2a\x54\x05\xb0\xeb\xd7\xd7\x24\x49\x0d\xb5\x35\xd3\x4e\x85\x90\xc1\x96\x87\x3e\x04\x56\x63\xac\xa8\xc8\xe0\xfb\xb7\x47\x90\x49\x5a\xd8\xcd\x24\xd1\xe4\xa3\xb2\x1e\x5b\x90\x09\x63\x8c\x0d\x35\x5b\x64\x57\x3d\x13\xdb\xab\x49\x57\xd8\x0d\x0f\xa8\x5a\x5d\xf1\x9c\xb6\x4c\x93\xe3\xae\xe4\x64\x4c\xc0\xc8\x6f\xa7\xf8\x0e\x64\x32\x60\x06\x54\xb5\xea\x49\xe0\xa8\xa4\x91\xbe\x2b\x85\x46\xf9\x09\xed\x57\x20\xff\xa4\xa2\x4f\xbd\xa7\xba\x05\xf9\xf3\xbc\xea\x0b\xc8\x87\xf3\xaa\xcf\x20\xef\x3f\xc4\xfa\x71\x5e\xf5\x15\xe4\xe3\xa1\x2a\x15\xd5\x6a\x2f\x6a\x26\x71\x70\x54\x2a\x0f\x32\x15\xcd\x5e\xb9\xb0\x9b\x83\x1f\xec\x19\x64\x7d\xd3\x45\x5e\xb6\xd4\x35\x07\x9b\x38\x28\x3f\x71\xce\x54\x17\x49\x53\xdd\x38\x8c\x98\x01\x19\x03\x8c\xf3\x05\xed\x80\x5a\x52\x37\x4e\x69\xac\xc8\x15\xd8\x66\x00\x8c\xc5\xe7\x06\x33\x88\xb8\x8d\xf0\x36\x27\x8e\x6f\x03\xbf\xdb\x39\xcd\xfa\xc9\xe2\xfd\xf8\xb4\xe4\x98\x21\xdd\x05\xb6\xe5\xeb\x27\x60\x5e\xd5\x98\xc1\xfa\x69\xa9\xdd\xfd\x9d\xdb\x5b\x19\xcf\xa3\x5f\x90\x0f\x9f\xe4\x5d\x8c\xb4\xfb\x28\x8f\x9e\xe5\xd1\xf3\x02\x8d\xea\x5c\x84\xb1\xd7\xd0\xe5\xb5\x8d\x27\x10\x47\x7f\x2e\xdd\x73\x53\x59\x4d\x9e\xed\xde\xc6\xe1\xee\xad\x39\x36\xfc\xcd\xd6\xff\xcd\x2c\x2c\x6c\x69\x4c\xc4\x60\xec\x3b\xce\x1a\xea\x0f\xd3\xd2\x3e\x75\xee\x44\x07\xce\xca\x54\xb1\xaa\x45\x93\x81\x08\xe2\xaf\x2d\x90\x84\xbe\x11\xe6\xe6\xba\x8a\xb5\x03\x39\x64\x52\xa1\x64\x2a\x9c\xfd\x18\xe4\x9e\x74\x57\xa3\x8f\x33\xce\x94\xbc\x0c\xf5\xd0\x05\xab\x67\x9c\x21\x73\x19\xe4\xb7\xd2\x6b\x55\xe2\x0c\x33\xe6\x2e\xec\xc6\xea\x4a\xa1\x63\xbf\x94\x5e\x07\xf2\xf3\xbe\xe6\xb5\xd3\xe0\x54\x1c\x9a\x31\x1a\xbb\x10\x8e\xaf\xbb\x47\x7f\x46\x64\x92\x1c\x5d\xd8\x86\x28\x62\x3b\x5c\xd9\xff\x02\x00\x00\xff\xff\x7c\x3a\x94\x34\xcd\x05\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchIndexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x69\x8f\xdb\x36\x13\xfe\xee\x5f\xc1\x30\x01\x6c\x23\x91\xb5\x9b\x20\x40\xb0\xb6\x14\xbc\xd9\x04\x6f\x82\xa2\x40\xdb\x5d\xf4\x4b\x51\x2c\x46\x12\x25\xb1\x4b\x91\x02\x35\xf2\x01\xd7\xff\xbd\xa0\x2e\xeb\xf4\x36\x8b\xb6\x36\x60\x51\xe4\xcc\xf0\x99\xe1\x5c\xf4\xf1\x88\x2c\x49\x05\x20\x23\xd4\x83\x8c\xd9\x31\x83\x80\x92\xd5\xe9\x34\x9b\x6d\x42\xa5\x13\xe2\x0b\xc8\x32\x87\xee\xad\xcc\xbc\x52\x92\x30\x8c\x55\xe0\xd0\xff\x7f\xb9\xa7\xee\x6c\x23\x61\x5b\x93\x48\xd8\x7a\xa0\x49\xf9\xb0\x02\x16\x42\x2e\x90\x50\xa2\x95\x60\xc5\x2a\x8f\x00\xb9\x92\xd4\x9d\x11\x42\xc8\x26\xe0\x0d\xab\xaf\x24\x02\x97\x4c\x57\x6b\xfd\xf5\x4a\xa6\x01\xd7\xa1\x29\xe8\xbc\x1c\x51\x49\x82\x87\x94\x39\xb4\x7c\xa1\x3d\x46\x54\x51\x24\x18\x25\x01\x20\x54\x2f\x66\x53\x21\x20\xcd\x9a\x69\xd0\x11\x43\x87\xae\x2a\x9e\x66\xb9\xb7\x5d\x96\x82\xac\xc5\x67\xda\x52\x52\x1c\xa8\x7b\x5f\xc8\x24\x67\x25\x37\xb6\xa1\xbb\xc0\xca\x7d\x25\x2d\x0f\x34\x75\xff\x43\x52\xbb\x34\x4f\x6f\x16\x7a\xd6\xf2\x34\xc8\x80\x92\x58\xb3\xd0\xa1\x36\x75\xef\xbe\xfd\xf8\xf9\xeb\xfd\xc6\x86\xd6\xe1\xd8\x01\xdf\x5e\x3c\xab\xda\x7c\x64\xca\x8e\xb9\x68\x71\xd4\x5e\x23\x61\xdb\xa3\x2b\x68\x05\xaf\x69\xa9\xbb\x81\x33\x32\x83\x69\x63\x0b\xde\x57\x33\x17\xee\xac\x3b\x35\x04\x58\x78\x77\x35\x16\x2c\xc4\xb1\x7d\x5b\x5c\x5c\xa6\x39\x5a\x91\x56\x79\x3a\x42\x59\x50\x17\x24\x95\x1f\x22\xdb\x23\x25\x90\xa3\xf2\x55\x92\x0a\x86\xcc\xa1\x2a\x0c\x1b\xc7\x34\xbb\x5b\xc6\xed\xb5\x12\x64\x6f\x3d\xee\x28\x91\x90\x30\x87\x9a\x51\x2a\xc0\x67\x5f\x95\x08\x98\x76\x28\x25\x5b\x10\x39\x73\xe8\xf1\xb8\xfa\x61\x77\x3a\x4d\xed\xde\x71\x83\x33\x58\xcb\x43\x39\xc1\x42\x5a\xd1\x53\x31\x7a\x28\x89\x87\xb2\x8e\x5e\x5a\x69\x93\xe5\x5e\xc2\xc7\x2c\x34\x89\x20\x12\x87\x34\x36\xde\x48\x9a\x91\x95\x31\xd0\x7e\x3c\xee\x9a\xdd\xf3\x1b\x73\xd3\xf3\xea\x38\x77\xcf\x25\x47\xa6\x5a\xaf\xd5\x70\x63\x4b\x28\x1e\xe6\x38\xdc\xd9\x6c\x36\x9e\x94\x48\x86\x07\x93\x31\x52\x08\x02\x2e\x23\xcb\x53\x88\x2a\xb9\x21\x6f\xaf\xd2\xfd\xda\x64\x41\xc3\x55\xd1\x78\xe0\x3f\x1a\xc3\xcb\xc0\x84\x80\xd2\x37\xe4\x65\xf8\xc1\x7c\xd7\xcf\xc8\x7b\x5a\xed\x48\x69\xb5\x87\x98\x4b\x1c\x00\x31\x7e\x7b\x43\xae\xdf\x97\x30\x3a\xaa\xc3\x38\xad\x41\xec\xe7\x3a\x53\xfa\x26\x55\x5c\x22\xd3\x6b\x4a\x30\x15\x0e\xb5\x33\xfb\x61\x15\x63\x22\xe8\xc0\xb4\x4a\xfa\x82\xfb\x8f\x0e\x35\x89\xf2\x4e\x69\xfc\x74\x58\x60\xcc\xb3\x37\x73\x7f\xfe\x86\xcc\xe7\x4b\x4a\x06\x3c\x4d\xbc\xf6\x57\x7a\x27\x04\xff\x1c\xee\x21\x88\x69\xe0\x61\x05\xfc\x02\xee\x21\xd0\xee\xcc\x0b\xcb\x22\x77\xa9\xe0\x48\xaa\x18\xb2\x2c\x77\x32\xe9\x98\xa0\x2a\xe2\x91\x34\x23\x6b\x9f\x4d\x7a\xd6\xbb\xe1\x89\x9e\x63\x95\x07\xce\x3c\xe4\x32\x78\xf0\x01\x59\xa4\xf4\x61\x3e\x5e\xfc\xfa\xc1\xec\x82\x10\x53\xb1\x75\xb1\x8a\xf6\x04\x91\x40\xab\x34\x50\x3b\x39\x5e\x57\xeb\x55\x4a\x40\x73\xb0\x62\xc8\x52\x95\xe6\xa9\x43\x51\xe7\xac\x9a\x64\xfb\x14\x64\xc0\x02\x87\x86\x20\x06\xb5\x81\xf4\xb3\x89\x0f\x9a\xe1\x74\xe2\xb8\x58\x93\x3f\x57\x70\xc6\x99\x27\xed\x71\x2e\x4f\x8d\xb6\x09\x93\xf9\x78\x75\x32\x45\xa9\xf1\xb5\x8c\x09\xe6\xe3\x6d\x75\x36\x8b\x39\x08\x31\x5f\xae\x2b\xeb\x8f\xd5\xab\xbf\x23\x64\xcb\x03\xa6\x0a\x31\xc5\xe8\xf9\x82\x92\x3c\xe3\x7e\x21\xa8\x18\x3d\x5f\x50\xa0\xfc\x3c\x61\x12\x0b\x59\xf5\xcb\xf3\xc5\xa5\xe0\x3f\x42\xc4\x0a\x69\xd5\xf8\xf9\xc2\x14\xc6\x4c\x17\xa2\x8a\xd1\x94\xa0\xb2\x51\xe8\xce\x3c\x59\x31\x8a\xc7\x44\xa1\x18\x66\x78\xad\x76\x13\xb9\xdd\x57\xc2\x4a\x02\xeb\x83\x69\x90\xac\x2c\xb1\xae\xdf\x5e\xea\x34\x75\x86\x19\x02\x52\xb7\xab\x41\x0f\xfc\x48\xcb\x77\xf6\xe3\x44\xf0\xac\x5f\xc3\x37\xa3\xd6\x8d\xdf\xd5\x3c\xf7\xd7\x53\xed\x06\x90\xba\x61\x7e\xf0\x04\xc8\xc7\xa6\x5f\xe4\x32\x54\xf6\x75\x99\x91\xdd\x41\x7e\x2f\x71\xc6\xef\xc6\x9a\xad\x06\xe9\x27\x85\xdf\x64\xa8\xa6\xb6\x6e\x77\x65\xc8\x12\xab\xd4\x6b\xa4\xfe\x9f\x39\xd0\x2c\xe3\x68\xd3\x20\xdc\xbe\x15\xc7\xfb\xc9\x16\xcb\x94\x4f\x64\xbe\xe6\x69\xbb\x03\xb4\xff\x80\x2d\x94\xb3\xd4\x9d\xbd\x5a\xd4\x61\xb2\x5c\x69\x06\xc1\x61\x11\xe6\xd2\x37\xb7\x85\xc5\xf2\x58\x16\x97\x2d\x68\xd2\x49\xed\xc4\x21\x3f\xfd\x7a\x7b\xbb\x8a\x18\xde\x2a\xf5\xc8\xd9\xa2\x97\xfa\x97\xeb\x86\x31\x62\xd8\xe6\x8b\x18\xfe\x9c\x33\x7d\xb8\x43\xcd\x65\xb4\x98\xf7\x59\x78\x48\x16\x1d\x59\xcb\x63\xa3\x24\x0f\x17\x2f\xda\xe2\x5a\x4b\xd5\x72\x67\xb3\x17\x0e\x29\xd3\xdc\x71\x60\x61\x03\x6c\x4b\x1c\x22\x94\x5f\x5c\x8c\x56\xc6\x4d\x56\x99\xa9\x9b\x8b\xf9\xc7\x1a\x4b\xfb\xd3\xa1\x24\x0e\xd9\xfe\x76\xf5\xfb\xeb\xf9\xc7\x7a\x33\x67\xfe\xba\x83\xba\x2b\xe0\x34\xeb\x8e\xca\xdf\x57\x8b\xf9\xcb\x9e\xd9\x56\xe6\x7c\x3a\x5a\x2c\xd7\xb3\xd3\x72\x3d\xdb\xd8\xe5\x81\x4d\x06\xf9\x93\xdd\x60\xed\x0e\xf5\x73\x70\x47\x6e\x0a\xa9\x84\xad\x15\x2a\x85\xf5\x3d\x24\xe4\x7b\x16\x54\x02\x9f\xd1\x2e\x1a\x51\x2d\x80\x46\x43\x0b\x04\x8f\xe4\x0d\xf1\x59\xd9\x33\x8d\xa4\x98\x89\x7a\xfa\x74\xf0\x9d\x7b\x1a\x53\x22\x27\xef\x45\xe4\xc9\x6b\x46\x31\xde\x67\xc3\xbe\xa2\xdb\x8d\xfc\x0b\x5d\x46\x57\xe3\x2a\x81\x7e\x4f\xeb\xd1\x08\xb8\x78\x67\x21\xdf\xd7\x51\x54\x9f\x0b\x9b\xf5\xeb\xd6\x79\xc5\xf8\xdc\x08\x6b\x85\x9f\xfc\x39\x5c\xa9\xef\xd3\x31\x62\x7a\x63\xdb\xbb\xdd\x6e\xe5\x71\x44\xa5\x35\x93\xb8\x52\x3a\xb2\x3d\x96\x66\xe6\xe7\xe1\xea\xea\xea\x7d\xd5\x6b\xf7\xb2\xbf\x5b\xfd\x43\x30\xbe\x41\xa5\x77\xcc\x83\x80\xc9\xa2\xef\xad\x8a\x85\x1f\x48\xcb\x8f\xb8\x8d\x1a\x7c\x36\x14\x7a\xff\xcb\xff\x6e\xbf\x8c\xd6\x90\x8b\x85\x6f\xf2\xa2\x37\xf8\xbb\xab\x8e\x98\xd5\xe9\xf4\x57\x00\x00\x00\xff\xff\xa0\x49\xcf\xbf\x0b\x13\x00\x00"

func searchIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchIndexTmpl,
		"search/index.tmpl",
	)
}

func searchIndexTmpl() (*asset, error) {
	bytes, err := searchIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchInfoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func searchInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchInfoTmpl,
		"search/info.tmpl",
	)
}

func searchInfoTmpl() (*asset, error) {
	bytes, err := searchInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md":             readmeMd,
	"base/footer.tmpl":      baseFooterTmpl,
	"base/head.tmpl":        baseHeadTmpl,
	"corner/recommend.tmpl": cornerRecommendTmpl,
	"index.tmpl":            indexTmpl,
	"search/index.tmpl":     searchIndexTmpl,
	"search/info.tmpl":      searchInfoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl":   &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"corner": &bintree{nil, map[string]*bintree{
		"recommend.tmpl": &bintree{cornerRecommendTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"search": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{searchIndexTmpl, map[string]*bintree{}},
		"info.tmpl":  &bintree{searchInfoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
