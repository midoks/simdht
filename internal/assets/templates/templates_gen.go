// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/README.md
// ../../../templates/base/footer.tmpl
// ../../../templates/base/head.tmpl
// ../../../templates/corner/recommend.tmpl
// ../../../templates/index.tmpl
// ../../../templates/search/index.tmpl
// ../../../templates/search/info.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\xc9\x80\xb8\x38\x0a\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\x03\x04\x00\x00\xff\xff\x2e\x92\xd9\x28\x11\x00\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xe1\x6e\xdb\x36\x10\xc7\xbf\xfb\x29\xce\x5a\x10\x51\x73\x24\xd9\xc5\x30\x14\x88\xe9\xa0\x70\x33\xa0\xc0\x80\x75\x5d\x52\x6c\x08\xd2\x80\xa1\xce\x16\x63\x8a\x52\xc9\x93\x15\x23\xf5\xbb\x0f\x94\xac\xd6\x4e\xd6\x2d\x6b\xfd\xc5\x22\xef\xee\x77\xff\x3b\xf2\x38\x1d\xbe\xfe\x6d\x7e\xf1\xd7\xdb\x73\xc8\xa9\xd0\xb3\xc1\xb4\xff\x43\x91\xcd\x06\xd3\x02\x49\x40\x4e\x54\xc5\xf8\xb1\x56\x6b\x1e\xcc\x4b\x43\x68\x28\xbe\xd8\x54\x18\x80\xec\x56\x3c\x20\xbc\xa7\xd4\x87\x9e\x82\xcc\x85\x75\x48\xfc\xf2\xe2\x97\xf8\x65\x00\xe9\x3f\x51\xfe\x8c\x2f\x5f\xc5\xf3\xb2\xa8\x04\xa9\x5b\xbd\x0f\x7a\x73\xce\x31\x5b\x62\xf0\x6f\xb9\x7f\x15\x66\x59\x8b\xe5\x7e\x98\x34\x3e\x62\x18\xc7\x95\x8c\xe3\xee\x0b\x3a\x80\x11\x05\xf2\x60\xad\xb0\xa9\x4a\x4b\x7b\x21\x8d\xca\x28\xe7\x19\xae\x95\xc4\xb8\x5d\x9c\x80\x32\x8a\x94\xd0\xb1\x93\x42\x23\x9f\x24\xe3\x13\x28\x94\x51\x45\x5d\x1c\x6c\x89\xfb\xc7\x5b\xb5\x43\xdb\xae\xc5\xad\x46\x6e\xca\x60\x06\xbd\x8e\xa2\xfd\xf8\xdf\x5a\x0e\x89\x1b\x74\x27\x4f\xc5\x3d\x15\xf2\x44\x47\x3a\x1b\x0c\xa6\xa4\x48\xe3\xcc\xa9\x22\xcb\x69\x9a\x76\xab\x03\x49\x2b\xdc\x34\xa5\xcd\xdc\x9e\xa4\xe0\xd0\x23\x43\x27\xad\xaa\x48\x95\xe6\x91\x93\x56\x66\x05\xb9\xc5\x05\x0f\x52\x47\x82\x94\x4c\xa5\x73\xe9\x6d\x59\x92\x23\x2b\xaa\xa4\x50\x26\x91\xce\x9d\xad\xf9\xc3\xc3\x7b\xb4\x4e\x95\x66\xbb\x0d\xc0\xa2\xe6\x81\xa3\x8d\x46\x97\x23\xd2\x73\x50\x31\xe5\x58\xe0\xf7\x03\x0b\xf1\x5c\xc2\x60\xda\x95\x0d\xce\xca\x2f\x8c\x3b\x97\xde\x7d\xac\xd1\x6e\xe2\x49\x32\x99\x24\xe3\x56\xd1\xdd\x63\xdc\x6c\x9a\x76\xc1\xb3\xcf\x14\xda\x54\xb8\x1b\x96\x3b\xb1\x16\xdd\xae\x4f\x33\xd8\xf3\x4d\x77\xb3\x77\x5b\x66\x1b\x6f\xfa\xaa\x86\xc3\x16\x3f\x27\xff\x57\x09\xb1\x57\x26\x7c\xe2\x6f\x66\xb5\x4d\xfd\xae\x26\x1c\xb1\x30\xb9\x8f\xdd\xa2\xb4\x45\x18\x25\xae\xbe\x2d\x14\xb1\x45\x6d\xa4\xbf\x75\x0c\xa3\x87\x01\x00\x00\x26\x95\xc5\x35\x1a\x7a\x8d\x0b\x51\x6b\x62\xd1\x69\xbb\xbf\x16\x16\x56\x0d\x70\xe8\x30\xab\x26\x8c\x92\xb5\xd0\xde\xdc\xda\xd5\x02\xd8\xaa\x49\x34\x9a\x25\xe5\x53\x3e\xd9\xe1\xfc\xaf\x51\x26\x2b\x9b\x44\x68\xb4\xc4\xc2\x57\x04\x1a\x85\x23\x78\x01\xed\x50\x0c\x87\xc3\x70\x97\xc3\xff\x2c\x52\x6d\x0d\x2c\x84\x76\xd8\xed\x6e\xfb\x04\x6c\xb8\x6a\xf6\xb0\x7b\x42\x16\xa5\xac\x1d\xfb\x0f\x4a\x5f\x45\x6d\x35\x70\x08\x53\x97\x86\x30\x02\x34\xb2\xcc\xf0\xf2\xdd\x1b\xff\x5e\x96\x06\x0d\xb1\x55\x13\xc1\x08\xc2\x1b\x39\xbe\x59\x8c\x6f\x26\x89\x7f\x78\xc3\x8e\xb2\x2b\x45\x97\x52\xf8\xae\x01\xf7\xb4\xce\x74\x98\x72\xeb\xfb\x32\xe8\xbb\x0b\x0e\x35\x4a\x9a\x0b\xc2\x65\x69\x37\xcc\x9f\xd1\xae\x92\x23\x16\xfe\xb0\x50\x26\xbb\x91\x3b\x63\x18\x25\xfe\xf0\x3a\x9f\x2f\xbd\x5f\x03\x87\x3e\x6d\xe2\x67\x2e\x71\x95\x56\xc4\xc2\xb3\xbe\x7b\x07\x56\xe0\xb0\xbe\x1a\x5f\x8f\xc2\xb3\x9e\xcb\xc3\x91\x47\x76\xbe\x6f\xdf\xcf\xe7\x89\x43\x9a\x97\xe5\x4a\x21\x0b\x0f\x15\x9c\xb4\x97\xe8\x04\x5e\xfe\xfc\xd3\x78\x1c\x9d\x0e\xb6\x7b\x95\x2c\x91\x7e\xf7\xb3\xf9\x07\x59\x65\x96\xcc\x3f\x5f\xfd\x99\x78\x99\x16\x97\xc0\xc1\x60\x03\xef\x70\x79\x7e\x5f\xb1\x80\x7d\xf8\x74\x1c\x05\xa3\xf6\xa1\x83\x51\xc0\xd9\xd5\x87\xe3\xeb\x1f\x23\x76\xfc\xe9\x28\x0a\xfa\x23\x6b\x43\x81\x3f\xee\x6f\xe2\x50\x58\x99\xfb\xcb\xea\xc8\xb2\x49\x94\x14\x82\x64\xce\x2c\x2e\xfb\x48\xb5\x60\x76\xc8\x4d\xad\xf5\xde\xd5\xd8\x9d\x45\x6d\xd0\x49\x51\x21\xb3\x57\x2f\xae\xa3\xd3\x7e\xdb\x3b\xef\xa2\xb7\xbe\xb6\xcf\x33\xf4\x77\x00\x00\x00\xff\xff\x64\x5f\x80\xcd\xae\x07\x00\x00"

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cornerRecommendTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func cornerRecommendTmplBytes() ([]byte, error) {
	return bindataRead(
		_cornerRecommendTmpl,
		"corner/recommend.tmpl",
	)
}

func cornerRecommendTmpl() (*asset, error) {
	bytes, err := cornerRecommendTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "corner/recommend.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4f\x6f\xa3\x3c\x10\xc6\xef\x7c\x0a\xbf\x73\xe9\xc9\xa5\xe9\xbb\x2b\xf5\x00\x3e\x75\xb5\x7f\xa4\x4a\x2b\x6d\xb5\xd7\xc8\x98\x01\xac\x18\x0f\xc2\x43\x9a\xaa\xea\x77\x5f\xc1\x42\x9a\x25\xa4\x69\x4e\x30\x33\x0f\x3f\xc6\x7e\xc6\x7e\x79\x61\xac\x1b\xa7\x19\x05\x64\x3a\x60\x5c\xa1\xce\x41\x5c\xbf\xbe\x46\x51\x52\x50\x5b\x0b\xe3\x74\x08\x29\xec\x64\xe8\x43\x10\x35\x72\x45\x79\x0a\x5f\xbf\x3c\x82\x8a\x92\xdc\x6e\x27\x89\x21\xcf\xda\x7a\x6c\x41\x45\x42\x08\x31\xd4\x6c\x9e\x5e\xf5\x4c\x6c\xaf\x26\x5d\x6e\xb7\x32\xa0\x6e\x4d\x25\x33\xda\x09\x43\x4e\xba\x52\x52\x51\x04\x64\x79\x3b\xc5\x77\xa0\xa2\x01\x33\xa0\xaa\x55\x4f\x02\x47\x25\x8d\xf4\x7d\x29\x34\xda\x4f\x68\xbf\x02\xf5\x2b\x89\xfb\xd4\x7b\xaa\x5b\x50\xdf\xcf\xab\x3e\x81\x7a\x38\xaf\xfa\x1f\xd4\xfd\x87\x58\xdf\xce\xab\x3e\x83\x7a\x9c\xab\x92\xb8\x5a\x1d\x44\xcd\x24\x0e\x8e\x4a\xed\x41\x25\x71\x73\x50\xce\xed\x76\xf6\x83\x03\x83\xac\x6f\x3a\x96\x65\x4b\x5d\x33\xdb\xc4\x41\xf9\x9f\x94\x42\x77\x4c\x86\xea\xc6\x21\x63\x0a\x54\x14\x20\xa4\x5c\xd0\x0e\xa8\x25\x75\xe3\xb4\xc1\x8a\x5c\x8e\x6d\x0a\x20\x04\x3f\x37\x98\x02\xe3\x8e\xe1\x6d\x4e\x9c\xdc\x05\x79\xb7\x77\x5a\xf4\x93\x25\xfb\xf1\x69\xc9\x89\x82\x4c\x17\xc4\x4e\x6e\x9e\x40\x78\x5d\x63\x0a\x9b\xa7\xa5\x76\x0f\x77\xee\x60\x65\x32\x63\xbf\x20\x1f\x3e\xc9\x3a\x66\xda\x7f\x94\xb1\x17\x19\x7b\x99\x63\xa1\x3b\xc7\x30\xf6\x1a\xba\xac\xb6\x7c\x02\x71\xf4\xe7\xd2\x3d\x37\x95\x35\xe4\xc5\xfe\x6d\x1c\xee\xde\x9a\x63\xc3\xdf\x6c\xfd\xdb\xcc\xc2\xc2\x96\xc6\x24\x1e\x8c\x7d\xc7\xd9\x82\xfa\xc3\xb4\xb4\x4f\x9d\x3b\xd1\x81\xb3\x2a\xd1\xa2\x6a\xb1\x48\x21\x0e\xf1\x6f\x9b\x23\xad\xcd\xcd\xba\xb8\x59\xaf\xae\x2b\xae\x1d\xa8\x21\x97\xc4\x5a\x25\xb1\xb3\x1f\xc3\xdc\x93\xe9\x6a\xf4\x3c\x23\x4d\xe9\xcb\x60\x0f\x5d\xb0\x66\x46\x1a\x72\x97\x61\x7e\x6a\xb3\xd1\x25\xce\x40\x63\xf6\xc2\x8e\xac\xa9\x34\x3a\xf1\x43\x9b\x4d\x20\x3f\xef\xed\xdf\xea\x69\x74\x12\xcf\x6d\x19\x2d\x5e\x08\xc7\xd7\xfd\xa3\x3f\x2d\x2a\x8a\x8e\xae\xee\x82\x88\xb1\x1d\x2e\xef\x3f\x01\x00\x00\xff\xff\x47\x09\xa3\x52\xd7\x05\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchIndexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xa3\x38\x10\x7f\xe7\x53\x4c\xbd\x2b\x41\xb4\x4b\x68\xb7\x3a\x69\xd5\x00\x2b\x6d\xef\xe5\xde\xee\xd4\xd5\xbd\x9c\x4e\x95\x83\x0d\xf8\x6a\x6c\x64\x0f\xd9\x44\x51\xbe\xfb\x09\x02\x84\x3f\xa1\x7b\x57\x2d\x95\x9a\xc1\x33\xf3\xf3\x6f\xfe\x78\xcc\xf1\x88\xbc\x28\x25\x45\x0e\x64\x4b\x2d\x0f\x72\x4e\x19\x81\xf5\xe9\xe4\x38\x21\x13\x3b\xb0\x78\x90\x3c\x22\x5b\x9a\xbc\x64\x46\x57\x8a\xf9\x89\x96\xda\x3c\xc0\xbb\xf4\x73\xfd\xb7\x21\xb1\x03\x00\xd0\x18\x27\x92\x5a\x1b\x91\x44\x2b\xa4\x42\x71\xd3\xea\xa6\x7a\xa3\xbf\x83\xe5\xd4\x24\xf9\x73\x2e\x14\x92\x6e\x93\x92\x32\x26\x54\xe6\x4b\x9e\xe2\x03\xdc\xfd\x52\xee\x37\x03\x84\x06\x85\x5e\xb7\xbd\x2d\xf7\x9b\xa4\x32\x56\x9b\x87\x52\x0b\x85\xdc\x6c\x08\x60\x29\x23\x12\xd8\xe0\x79\x9d\x63\x21\xc9\x08\xa8\x7e\xb4\x4a\xa4\x48\x5e\x22\xc2\x28\xd2\x27\x6d\xf0\xeb\xc1\xc3\x5c\xd8\x8f\x6e\xe2\x7e\x04\xd7\x5d\x11\x98\xf9\xb4\x11\x4c\x68\x01\x8c\x2d\xc3\x80\xfe\x3c\xde\x73\x12\xcb\xc4\xd3\x96\xf8\x2b\xbc\xe7\x44\xc7\x2b\x37\xbe\x0f\x4f\xa5\x14\x08\xdb\x0a\x51\x2b\xf0\xfd\x49\x2c\x83\x4a\x6e\x51\xf9\x75\x5b\x94\xd0\x4b\xfe\xde\xce\x0a\xba\xd5\x88\xba\x78\x80\xfb\x79\x45\x01\xc2\x76\x1f\xc1\x22\x37\x15\x8a\x3d\x27\x14\x79\xa6\xcd\xc1\x05\x3c\x94\x75\xef\x35\x7a\x32\xd8\xb3\xd9\x8d\xf1\x94\x56\x12\x49\x4c\xa5\x0c\x83\xb3\xd1\x12\xf6\x7f\x01\x02\x66\x74\xc9\xf4\x77\xe5\xa3\xce\x32\xc9\x09\xd4\xe9\x6d\x5f\x22\xd2\x69\x09\x50\x23\xa8\x9f\x53\x5b\xea\xb2\x2a\x23\x82\xa6\xe2\xed\x22\xdf\x97\x54\x31\xce\x22\x92\x52\x69\xf9\xbc\x4b\x20\xb4\x25\x55\xfd\x39\xa1\x86\x23\x89\xc3\xa0\x5e\xfc\x81\xad\x35\xbe\x56\xf2\x40\xe2\x6f\x0d\x1f\xf8\xb5\xa5\x73\xdd\x79\x31\x1f\x95\xec\x00\xfb\x68\x0b\xae\xaa\x6b\x4c\xa5\x88\x43\x7a\xe9\x35\xcb\x25\x4f\xf0\xb1\xad\x8d\xe7\x52\x29\xdd\xd5\xa6\xcd\x3e\x8d\xc3\x40\x8a\xff\x0f\xb2\x13\x8c\xeb\x06\xa6\x91\xde\x0e\x54\x54\x56\x24\x0d\x50\x23\xbd\x1d\x88\xe9\xa4\x2a\xb8\xc2\x06\xab\x7b\x79\x3b\x5c\x49\x93\x17\x9a\xf1\x06\xad\x95\xdf\x0e\xa6\x31\xe7\xa6\x81\x6a\xa4\x25\xa0\x30\xa8\xe4\xe4\xc8\x06\x4c\xec\x06\xb3\xf8\xf2\xda\x8a\xdd\xcf\x2b\x43\x7c\x32\xc0\x17\x46\x7b\xa2\xa5\x5f\x30\xff\x33\xd4\x82\x2d\xfc\xbb\x4f\xd3\x09\x3e\x6c\x6a\x63\xd1\x22\xc5\x8b\xc9\x24\x92\x49\x10\xf3\x4e\x77\x9c\x79\x12\x2f\x2d\x5e\x48\x61\xf1\x07\xa3\xba\xcb\xfb\x6c\xb1\x51\xe4\xf7\x1d\xd6\xb7\xbb\x2b\x67\xa4\xb7\xa3\x80\xd4\x64\x1c\x23\xf2\xbc\x95\x54\xbd\x10\xc8\x0d\x4f\x23\x12\x08\x95\xea\xe0\xee\x3c\xc8\xe3\xd9\xb5\x70\x09\x2d\xbf\x5f\xd0\xb0\x3e\x9a\xaf\x1a\x7f\x53\xa9\x7e\x8d\xc6\xa0\x10\x02\x79\xe1\x9f\xe3\x9f\x54\x7f\xee\x85\xcb\xca\x6b\xe9\xba\xb0\x5e\xf2\x0c\x03\x26\xe3\x2b\x79\xbe\xde\xf5\x7d\xbb\x3a\xd3\x0e\x1d\xb5\xc5\xb8\x55\x9d\xd0\x26\x46\x94\xd8\x8e\x76\xe4\x7b\x0c\xfe\xa1\x3b\x7a\x5e\x25\xb1\xf3\xde\xeb\x4e\xef\x6a\x6d\x38\x65\x07\x2f\xad\x54\x82\x42\x2b\x6f\x75\x3c\x23\xef\xa8\x81\xd1\x8d\x03\x11\xfc\xfe\xe7\xe3\xe3\x3a\xe3\xf8\xa8\xf5\x8b\xe0\xde\xe4\x46\x5a\x6d\x7a\xc7\x8c\xe3\xd0\x2f\xe3\xf8\x47\xc5\xcd\xe1\x09\x8d\x50\x99\xe7\x4e\x5d\x44\x0a\xde\x08\x6b\x75\xec\xa3\x15\xa9\x77\x33\x84\x1b\xa8\x5a\xf5\x68\xb3\x9b\x08\xce\xd3\xf7\x38\xcb\x65\x4d\x6c\x07\x11\x48\x9d\xd0\x3a\xd4\x75\xdd\x86\x6b\x5b\x5f\xe7\x9e\xfb\xa5\xe3\x32\x7c\x46\x96\x10\xc1\xee\xaf\xdb\xbf\x3f\xb8\x5f\xba\xcd\x22\xf7\xc3\x88\xf5\x18\xe0\xe4\x8c\xa5\xf3\xff\xf7\x9e\xfb\x6e\x92\xb6\x75\x5d\x9f\x51\x14\xab\x8d\x73\x5a\x6d\x9c\x30\x38\x17\x2c\x76\x16\x86\xcf\xd2\xa7\xc4\xa7\xdb\xcb\xb7\x44\xdf\x13\xce\xec\x73\x36\xd5\x1a\x6b\x94\xf5\xe9\xf4\x6f\x00\x00\x00\xff\xff\xdc\x2b\xdf\x1d\xeb\x0a\x00\x00"

func searchIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchIndexTmpl,
		"search/index.tmpl",
	)
}

func searchIndexTmpl() (*asset, error) {
	bytes, err := searchIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchInfoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func searchInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchInfoTmpl,
		"search/info.tmpl",
	)
}

func searchInfoTmpl() (*asset, error) {
	bytes, err := searchInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md":             readmeMd,
	"base/footer.tmpl":      baseFooterTmpl,
	"base/head.tmpl":        baseHeadTmpl,
	"corner/recommend.tmpl": cornerRecommendTmpl,
	"index.tmpl":            indexTmpl,
	"search/index.tmpl":     searchIndexTmpl,
	"search/info.tmpl":      searchInfoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl":   &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"corner": &bintree{nil, map[string]*bintree{
		"recommend.tmpl": &bintree{cornerRecommendTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"search": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{searchIndexTmpl, map[string]*bintree{}},
		"info.tmpl":  &bintree{searchInfoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
