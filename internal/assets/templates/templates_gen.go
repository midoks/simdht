// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/README.md
// ../../../templates/base/footer.tmpl
// ../../../templates/base/head.tmpl
// ../../../templates/corner/recommend.tmpl
// ../../../templates/index.tmpl
// ../../../templates/search/index.tmpl
// ../../../templates/search/info.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\xc9\x80\xb8\x38\x0a\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\x03\x04\x00\x00\xff\xff\x2e\x92\xd9\x28\x11\x00\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xe1\x6e\xdb\x36\x10\xc7\xbf\xfb\x29\x68\x2d\x88\xa8\x39\x92\xec\x62\x18\x0a\xc4\x74\x50\xb8\x19\x50\x60\xc0\xba\x2e\x29\x36\x04\x69\xc0\x50\x67\x89\x31\x45\xaa\xe4\x49\x8a\x91\xfa\xdd\x07\x4a\xd6\x62\x27\x5b\x9b\x6d\xfe\x62\xf1\xc8\xfb\xdd\xff\xee\xc8\x9b\x8f\xdf\xfe\xb2\xbc\xf8\xe3\xfd\x39\x29\xb0\x54\x8b\xd1\x7c\xf8\x03\x9e\x2d\x46\xf3\x12\x90\x93\x02\xb1\x8a\xe1\x73\x2d\x1b\x16\x2c\x8d\x46\xd0\x18\x5f\x6c\x2a\x08\x88\xe8\x57\x2c\x40\xb8\xc7\xd4\xbb\x9e\x12\x51\x70\xeb\x00\xd9\xe5\xc5\x4f\xf1\xeb\x80\xa4\x7f\x47\xf9\x3d\xbe\x7c\x13\x2f\x4d\x59\x71\x94\xb7\x6a\x1f\xf4\xee\x9c\x41\x96\x43\xf0\xb5\xd8\x3f\x73\x9d\xd7\x3c\xdf\x77\x13\xda\x7b\x8c\xe3\xb8\x12\x71\xdc\x7f\x91\x1e\xa0\x79\x09\x2c\x68\x24\xb4\x95\xb1\xb8\xe7\xd2\xca\x0c\x0b\x96\x41\x23\x05\xc4\xdd\xe2\x84\x48\x2d\x51\x72\x15\x3b\xc1\x15\xb0\x59\x32\x3d\x21\xa5\xd4\xb2\xac\xcb\x03\x13\xbf\x7f\x6a\xaa\x1d\xd8\x6e\xcd\x6f\x15\x30\x6d\x82\x05\x19\x74\x94\xdd\xc7\xbf\xd6\x72\x48\xdc\x80\x3b\x79\x2e\xee\xb9\x90\x67\x3a\xd2\xc5\x68\x34\x47\x89\x0a\x16\x4e\x96\x59\x81\xf3\xb4\x5f\x1d\x48\x5a\xc3\xa6\x35\x36\x73\x7b\x92\x82\xc3\x13\x19\x38\x61\x65\x85\xd2\xe8\x27\x87\x94\xd4\x6b\x52\x58\x58\xb1\x20\x75\xc8\x51\x8a\x54\x38\x97\xde\x1a\x83\x0e\x2d\xaf\x92\x52\xea\x44\x38\x77\xd6\xb0\x87\x87\x8f\x60\x9d\x34\x7a\xbb\x0d\x88\x05\xc5\x02\x87\x1b\x05\xae\x00\xc0\x97\xa0\x62\x2c\xa0\x84\xff\x0f\x2c\xf9\x8b\x09\x7d\xd6\xc4\x59\xf1\x88\xb8\x73\xe9\xdd\xe7\x1a\xec\x26\x9e\x25\xb3\x59\x32\xed\x04\xdd\x3d\xa5\x2d\xe6\x69\xef\xbc\x18\xcd\xd3\xdd\x73\xba\x35\xd9\xc6\x37\xe4\x1f\xa8\x87\x35\xfb\x2a\xf1\x5b\x84\x18\x37\x15\x70\x1f\xf6\x3f\xb3\xba\x2a\xbd\xc4\xd1\x87\xda\x8d\x80\x3b\xde\xf0\xde\x1a\x2c\x46\xa3\x23\x1a\x26\xf7\xb1\x5b\x19\x5b\x86\x51\xe2\xea\xdb\x52\x22\x5d\xd5\x5a\xf8\x6b\x44\x21\x7a\x18\x11\x42\x08\x24\x95\x85\x06\x34\xbe\x85\x15\xaf\x15\xd2\xe8\xb4\xb3\x37\xdc\x92\x75\x4b\x18\xe9\x31\xeb\x36\x8c\x92\x86\x2b\xbf\xdd\xed\xcb\x15\xa1\xeb\x36\x51\xa0\x73\x2c\xe6\x6c\xb6\xc3\xf9\x5f\x2b\x75\x66\xda\x84\x2b\xb0\x48\xc3\x37\x48\x14\x70\x87\xe4\x15\xe9\x6e\xf9\x78\x3c\x0e\x77\x31\xfc\xcf\x02\xd6\x56\x93\x15\x57\x0e\x7a\xeb\xb6\x0f\x20\x8c\x76\x46\x41\xa2\x4c\x4e\xd7\xed\x63\x58\x3a\x5e\xb7\x7b\xc1\xf6\xe4\xad\x8c\xa8\x1d\xfd\x06\x7b\xc8\xad\xb6\x8a\x30\x12\xa6\x2e\x0d\xc9\x84\x80\x16\x26\x83\xcb\x0f\xef\xfc\x58\x34\x1a\x34\xfa\x98\x64\x42\xc2\x1b\x31\xbd\x59\x4d\x6f\x66\x89\x9f\xaf\x61\x4f\xd9\x25\xa8\x8c\xe0\xbe\x96\x84\x79\x5a\xbf\x75\x18\x72\xeb\x65\x8f\x86\x9a\x13\x07\x0a\x04\x2e\x39\x42\x6e\xec\x86\xfa\xce\xed\x32\x39\xa2\xe1\x77\x2b\xa9\xb3\x1b\xb1\xdb\x0c\xa3\xc4\xb7\xb4\x3f\xf3\xd8\x91\x86\x30\x32\x84\x4d\xfc\xd3\x4a\x5c\xa5\x24\xd2\xf0\x6c\xa8\xe9\xc1\x2e\x61\xa4\xb9\x9a\x5e\x4f\xc2\xb3\x81\xcb\xc2\x89\x47\xf6\x67\xdf\x7f\x5c\x2e\x13\x07\xb8\x34\x66\x2d\x81\x86\x87\x0a\x4e\xba\xab\x75\x42\x5e\xff\xf8\xc3\x74\x1a\x9d\x8e\xb6\x7b\x99\xe4\x80\xbf\xfa\x37\xf8\x1b\x5a\xa9\x73\xea\xa7\xd4\xd0\x13\x2f\xd3\x42\x4e\x18\xd1\xd0\x92\x0f\x90\x9f\xdf\x57\x34\xa0\x9f\xbe\x1c\x47\xc1\xa4\x9b\x67\x64\x12\x30\x7a\xf5\xe9\xf8\xfa\xfb\x88\x1e\x7f\x39\x8a\x82\xa1\x65\x9d\x2b\x61\x4f\xeb\x9b\x38\xe0\x56\x14\xfe\x0a\x3b\xb4\x74\x16\x25\x25\x47\x51\x50\x0b\xf9\xe0\x29\x57\xd4\x8e\x99\xae\x95\xda\xbb\x1a\xbb\x5e\xd4\x1a\x9c\xe0\x15\x50\x7b\xf5\xea\x3a\x3a\x1d\xcc\xfe\xf0\xce\x7b\xeb\x73\xfb\xeb\x65\xfd\x19\x00\x00\xff\xff\xdc\x23\x51\xf8\x95\x07\x00\x00"

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cornerRecommendTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func cornerRecommendTmplBytes() ([]byte, error) {
	return bindataRead(
		_cornerRecommendTmpl,
		"corner/recommend.tmpl",
	)
}

func cornerRecommendTmpl() (*asset, error) {
	bytes, err := cornerRecommendTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "corner/recommend.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4f\x6f\xa3\x3c\x10\xc6\xef\x7c\x0a\xbf\x73\xe9\xc9\xa5\xe9\xbb\x2b\xf5\x00\x3e\x75\xb5\x7f\xa4\x4a\x2b\x6d\xb5\xd7\xc8\x98\x01\xac\x18\x0f\xc2\x43\x9a\xaa\xea\x77\x5f\xc1\x42\x9a\x25\xa4\x69\x4e\x30\x33\x0f\x3f\xc6\x7e\xc6\x7e\x79\x61\xac\x1b\xa7\x19\x05\x64\x3a\x60\x5c\xa1\xce\x41\x5c\xbf\xbe\x46\x51\x52\x50\x5b\x0b\xe3\x74\x08\x29\xec\x64\xe8\x43\x10\x35\x72\x45\x79\x0a\x5f\xbf\x3c\x82\x8a\x92\xdc\x6e\x27\x89\x21\xcf\xda\x7a\x6c\x41\x45\x42\x08\x31\xd4\x6c\x9e\x5e\xf5\x4c\x6c\xaf\x26\x5d\x6e\xb7\x32\xa0\x6e\x4d\x25\x33\xda\x09\x43\x4e\xba\x52\x52\x51\x04\x64\x79\x3b\xc5\x77\xa0\xa2\x01\x33\xa0\xaa\x55\x4f\x02\x47\x25\x8d\xf4\x7d\x29\x34\xda\x4f\x68\xbf\x02\xf5\x2b\x89\xfb\xd4\x7b\xaa\x5b\x50\xdf\xcf\xab\x3e\x81\x7a\x38\xaf\xfa\x1f\xd4\xfd\x87\x58\xdf\xce\xab\x3e\x83\x7a\x9c\xab\x92\xb8\x5a\x1d\x44\xcd\x24\x0e\x8e\x4a\xed\x41\x25\x71\x73\x50\xce\xed\x76\xf6\x83\x03\x83\xac\x6f\x3a\x96\x65\x4b\x5d\x33\xdb\xc4\x41\xf9\x9f\x94\x42\x77\x4c\x86\xea\xc6\x21\x63\x0a\x54\x14\x20\xa4\x5c\xd0\x0e\xa8\x25\x75\xe3\xb4\xc1\x8a\x5c\x8e\x6d\x0a\x20\x04\x3f\x37\x98\x02\xe3\x8e\xe1\x6d\x4e\x9c\xdc\x05\x79\xb7\x77\x5a\xf4\x93\x25\xfb\xf1\x69\xc9\x89\x82\x4c\x17\xc4\x4e\x6e\x9e\x40\x78\x5d\x63\x0a\x9b\xa7\xa5\x76\x0f\x77\xee\x60\x65\x32\x63\xbf\x20\x1f\x3e\xc9\x3a\x66\xda\x7f\x94\xb1\x17\x19\x7b\x99\x63\xa1\x3b\xc7\x30\xf6\x1a\xba\xac\xb6\x7c\x02\x71\xf4\xe7\xd2\x3d\x37\x95\x35\xe4\xc5\xfe\x6d\x1c\xee\xde\x9a\x63\xc3\xdf\x6c\xfd\xdb\xcc\xc2\xc2\x96\xc6\x24\x1e\x8c\x7d\xc7\xd9\x82\xfa\xc3\xb4\xb4\x4f\x9d\x3b\xd1\x81\xb3\x2a\xd1\xa2\x6a\xb1\x48\x21\x0e\xf1\x6f\x9b\x23\xad\xcd\xcd\xba\xb8\x59\xaf\xae\x2b\xae\x1d\xa8\x21\x97\xc4\x5a\x25\xb1\xb3\x1f\xc3\xdc\x93\xe9\x6a\xf4\x3c\x23\x4d\xe9\xcb\x60\x0f\x5d\xb0\x66\x46\x1a\x72\x97\x61\x7e\x6a\xb3\xd1\x25\xce\x40\x63\xf6\xc2\x8e\xac\xa9\x34\x3a\xf1\x43\x9b\x4d\x20\x3f\xef\xed\xdf\xea\x69\x74\x12\xcf\x6d\x19\x2d\x5e\x08\xc7\xd7\xfd\xa3\x3f\x2d\x2a\x8a\x8e\xae\xee\x82\x88\xb1\x1d\x2e\xef\x3f\x01\x00\x00\xff\xff\x47\x09\xa3\x52\xd7\x05\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchIndexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5d\x6f\xdb\x36\x17\xbe\xf7\xaf\x60\xd9\x02\xb6\xd1\x4a\x4a\x1a\x14\x08\x12\x4b\xc5\xdb\xb4\x78\xdb\x8b\x61\xeb\x92\xee\x66\x18\x02\x8a\xa2\x24\x2e\x14\xa9\x51\x47\x8e\xbd\x34\xff\x7d\xa0\xbe\xac\x0f\xca\x5d\x83\x6d\x29\x60\xd3\x24\xcf\xe1\x73\x0e\xcf\xc7\xc3\x3e\x3c\x00\xcb\x72\x41\x80\x21\x1c\x92\x82\x79\x29\x23\x11\x46\xee\xe3\xe3\x62\xb1\x89\x95\xce\x10\x15\xa4\x28\x7c\xbc\x73\x0a\xf3\x13\xa3\x8c\x41\xaa\x22\x1f\xff\xff\xc3\x0d\x0e\x16\x1b\x49\xb6\xed\x16\x49\xb6\x21\xd1\xa8\xfe\x72\x22\x16\x93\x52\x00\xc2\x48\x2b\xc1\xaa\x55\x9e\x10\xe0\x4a\xe2\x60\x81\x10\x42\x9b\x88\x77\xa2\x54\x49\x20\x5c\x32\xdd\xac\x8d\xd7\x1b\x9d\x06\xdc\x60\x4f\xb5\x2f\x2c\x01\x94\x44\xb0\xcf\x99\x8f\xeb\x1f\x78\x24\x08\x2a\x49\x04\xc3\x28\x22\x40\x9a\x1f\xe6\x50\x21\x48\x5e\x74\xd3\x44\x27\x0c\x7c\xec\x36\x32\xdd\xf2\xe8\xb8\x22\x27\xb2\x55\x5f\x68\x47\x49\xb1\xc7\xc1\x4d\xa5\x13\x1d\x8c\xdc\x78\x66\xdf\x11\x51\x4e\x95\x74\x42\xa2\x71\xf0\x1f\x6e\xf5\x6a\xf7\x8c\x66\xc9\xc8\x5b\xa1\x26\x32\xc2\x28\xd5\x2c\xf6\xb1\x87\x83\xeb\x1f\xdf\x7f\xbc\xd9\x78\xa4\x77\x37\x5e\xc4\xb7\x47\xaf\xaa\xf5\x1e\x9a\x73\x63\x29\x7a\x12\x6d\xd0\x48\xb2\x1d\xed\xab\xf6\x0a\xde\xee\xc5\xc1\x86\x1c\x80\x19\x4c\x1b\x4f\xf0\xb1\x95\xa5\x08\x16\xc3\xa9\x29\xc0\x2a\xb8\x9b\xb1\x60\x31\xd8\xce\xed\x49\x71\x99\x97\xe0\x24\x5a\x95\xb9\x65\x67\xb5\xbb\xda\xd2\x84\x21\xb0\x1d\x60\x44\x4a\x50\x54\x65\xb9\x60\xc0\x7c\xac\xe2\xb8\x8b\x4b\x73\xba\x63\xa2\x5e\x2b\x81\x76\xce\xdd\x3d\x46\x92\x64\xcc\xc7\x66\x94\x0b\x42\xd9\x47\x25\x22\xa6\x7d\x8c\xd1\x96\x88\x92\x19\xd3\xed\xc7\x0e\xae\xff\x80\xd2\x09\x41\xce\x88\xa0\x5e\xd6\x34\x82\x21\x48\x14\x82\x6c\xb3\x16\x37\x66\x14\x65\x98\x71\x9b\x6b\x66\x11\x24\x62\x9f\xa7\x26\x0a\x51\x37\x72\x0a\x46\x34\x4d\xed\x21\x39\xbc\x38\x5b\x78\x1e\x56\xed\xd2\xa3\x58\x9c\x99\xb2\x85\x6e\x33\xdc\x78\x92\x54\x5f\xe6\x52\x82\xc5\x62\x61\xaf\x4c\xa8\x80\xbd\x29\x1b\x39\x89\x22\x2e\x13\x27\x54\x00\x2a\xbb\x40\xaf\x4f\xf2\xdd\xa5\x29\x85\x46\xaa\xd9\x13\x12\x7a\x67\x6e\x41\x46\x26\x11\x94\xbe\x40\xcf\xe3\x73\xf3\xef\xf2\x09\xc5\x4f\xab\x7b\x54\xbb\xf0\x36\xe5\x12\x26\x40\x4c\xf4\x5e\xa0\xd3\x37\x35\x8c\x81\x1f\x88\x7d\xaf\x41\x4c\x4b\x5d\x28\x7d\x91\x2b\x2e\x81\xe9\x4b\x8c\x20\x17\x3e\xf6\x0a\xef\xd6\x4d\x21\x13\x78\xe2\x67\x25\xa9\xe0\xf4\xce\xc7\xa6\x5a\x5e\x2b\x0d\xef\xf6\x2b\x48\x79\xf1\x6a\x49\x97\xaf\xd0\x72\xb9\xc6\x68\x22\xd3\x65\xed\x78\x65\x74\x5d\xe4\x9f\xc3\x3d\x05\x31\x0f\x3c\x6e\x80\x1f\xc1\x3d\x05\x3a\x9c\x79\xe6\x38\xe8\x3a\x17\x1c\x50\x93\x50\x8e\x13\xcc\x96\x1e\x93\x61\x55\x72\xa2\x6e\xe4\xec\x8a\xd9\xc8\x3a\x9b\xde\xe8\x21\x71\x79\xe4\x2f\x63\x2e\xa3\x5b\x4a\x80\x25\x4a\xef\x97\xf6\x0e\x38\xce\xec\x80\x08\x31\x97\x68\x47\x5b\xe9\x48\x11\x8a\xb4\xca\x23\x75\x2f\xed\xcd\xb5\x5d\xc5\x88\x68\x4e\x9c\x94\x14\xb9\xca\xcb\xdc\xc7\xa0\x4b\xd6\x4c\xb2\x5d\x4e\x64\xc4\x22\x1f\xc7\x44\x4c\x3a\x04\x1a\x97\x16\x4a\x34\x83\xf9\x2a\x72\xb4\x31\xbf\x6f\xe0\xd8\x85\x67\xfd\x71\x68\x52\x9d\xb5\x19\x93\xa5\xbd\x47\x99\xd6\xd4\xc5\x5a\xc1\x04\xa3\x70\xd5\xdc\xcd\x6a\x49\x84\x58\xae\x2f\x1b\xef\xdb\xba\xd6\xdf\x51\xb2\xe5\x11\x53\x95\x9a\x6a\xf4\x74\x45\x59\x59\x70\x5a\x29\xaa\x46\x4f\x57\x14\x29\x5a\x66\x4c\x42\xa5\xab\xfd\xf1\x74\x75\x39\xa1\x77\x24\x61\x95\xb6\x66\xfc\x74\x65\x0a\x52\xa6\x2b\x55\xd5\x68\x4e\x51\x4d\x17\x86\x33\x43\x76\x63\xe9\x18\xd5\xd7\x4c\xa3\x98\x56\x78\xad\xee\x67\x6a\x3b\x55\xc2\xc9\x22\xe7\xdc\xd0\x24\xa7\xc8\x9c\xd3\xd7\xc7\xe8\xa6\x2e\xa0\x00\x02\x38\x18\x5a\x30\x02\x6f\xe1\x7d\x87\x38\xce\x04\x2f\xc6\x0d\x7d\x63\xf5\x6e\x7a\xd6\xca\xdc\x9c\xce\x71\x0f\x82\x5a\xd6\x7c\x1b\x0a\x22\xef\x3a\xd2\xc8\x65\xac\xbc\xd3\xba\x22\x07\x93\xfa\x5e\xe3\x4c\xcf\x6c\x94\xab\x43\xfa\x4e\xc1\x27\x19\xab\xb9\xa3\xfb\xdc\x0c\x58\xe6\xd4\x76\x59\x3a\xff\x41\x02\xcc\x32\x58\x19\x84\x08\xc6\x5e\xb4\xb3\xca\x9e\xc8\x5c\x4c\x14\x54\xf3\xbc\xcf\x03\xbd\xdf\xc9\x96\xd4\xb3\x38\x58\xbc\x58\xb5\x69\xb2\x76\x35\x23\xd1\x7e\x15\x97\x92\x9a\x27\xc3\x6a\xfd\x50\x37\x97\x2d\xd1\x68\x50\xda\x91\x8f\x7e\xfa\xe5\xea\xca\x4d\x18\x5c\x29\x75\xc7\xd9\x6a\x54\xfa\xd7\x97\x9d\x60\xc2\xa0\x2f\x97\x30\xf8\x5c\x32\xbd\xbf\x06\xcd\x65\xb2\x5a\x8e\x45\x78\x8c\x56\x03\x5d\xeb\x87\xce\x48\x1e\xaf\x9e\xf5\xd5\xf5\x96\x9a\xe5\xc1\x61\xcf\x7c\x54\x97\xb9\x87\x89\x87\x0d\xb0\x2d\xf2\x91\x50\xb4\x7a\x1d\xb9\x26\x4c\xdc\xc2\xf4\xcd\xd5\xf2\x6d\x8b\xa5\xff\x37\xd8\x89\x7c\xb4\xfd\xf5\xe4\xb7\x97\xcb\xb7\xed\x61\xfe\xf2\xe5\x00\xf5\x50\xc1\xe3\x62\x38\xaa\x3f\x5f\xac\x96\xcf\x47\x6e\x73\xcd\xfd\x0c\xac\x58\x5f\x2e\x1e\xd7\x97\x8b\x8d\x57\x5f\xd8\x6c\x92\x7f\x93\x0d\xb6\xe1\xd0\x7e\x4f\x1e\xca\x5d\x23\x95\x64\xeb\xc4\x4a\x41\xfb\x1a\x89\xf9\x8e\x45\x8d\xc2\x27\xd0\x45\xa3\xaa\x07\xd0\x58\xe8\x10\xc1\x13\x79\x81\x28\xab\x39\x93\xa5\xc4\xcc\xf4\xd3\x6f\x27\xdf\x81\xd3\x98\x16\x39\xfb\x3a\x42\xdf\x7c\x73\x54\xe3\x5d\x31\xe5\x15\x43\x36\xf2\x2f\xb0\x8c\xa1\xc5\x4d\x01\xfd\x1e\xea\xd1\x29\x38\xfa\x80\x41\xdf\xc7\x28\x9a\xbf\x23\x87\x8d\xfb\xd6\x61\xc5\xc4\x9c\x45\xb4\xc1\x8f\xbe\x4e\x57\x0c\x8f\xed\x3d\xad\xc7\x75\xbd\xaa\xe1\xe8\xeb\x84\xdd\xa2\xba\x0b\xd4\x62\x29\x40\x7e\xe1\x79\xf7\xf7\xf7\x6e\xc8\x01\x94\xd6\x4c\x82\xab\x74\xe2\x85\x2c\x2f\xcc\xc7\xed\xc9\xc9\xc9\x9b\x86\xa7\xdb\x4f\xb0\x69\x6f\x1c\x96\xf2\x28\x62\xb2\x22\xcc\x0d\x4c\x1a\x49\x87\x26\xdc\x03\x4d\x28\x9b\x6a\xbc\xf9\xf9\x7f\x57\x1f\xec\xcd\xa7\x7f\xb9\x07\xbd\xc1\xd7\x59\x72\x39\xb2\x31\x3b\x2b\xcf\x5d\x4a\x68\xca\x68\x4a\x5c\xaa\xb2\xe9\xe9\x3f\x9c\x7d\x39\xaf\x6c\x9a\xc9\xac\xf9\xb3\xcc\x5d\x4c\x6d\x9e\x71\x7d\x0f\x57\x61\x80\xb9\x21\xff\xa3\x74\x77\xfb\x3f\xa7\x88\xde\x7d\xfa\xfc\xc5\x8e\xe8\x28\x83\x98\x7d\x31\x4f\xfe\xf3\xb0\x2d\x3d\xee\xe3\xe3\x5f\x01\x00\x00\xff\xff\xa1\xdc\xe9\x66\x59\x14\x00\x00"

func searchIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchIndexTmpl,
		"search/index.tmpl",
	)
}

func searchIndexTmpl() (*asset, error) {
	bytes, err := searchIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchInfoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func searchInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchInfoTmpl,
		"search/info.tmpl",
	)
}

func searchInfoTmpl() (*asset, error) {
	bytes, err := searchInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md":             readmeMd,
	"base/footer.tmpl":      baseFooterTmpl,
	"base/head.tmpl":        baseHeadTmpl,
	"corner/recommend.tmpl": cornerRecommendTmpl,
	"index.tmpl":            indexTmpl,
	"search/index.tmpl":     searchIndexTmpl,
	"search/info.tmpl":      searchInfoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl":   &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"corner": &bintree{nil, map[string]*bintree{
		"recommend.tmpl": &bintree{cornerRecommendTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"search": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{searchIndexTmpl, map[string]*bintree{}},
		"info.tmpl":  &bintree{searchInfoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
