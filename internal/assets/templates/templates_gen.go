// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/README.md
// ../../../templates/base/footer.tmpl
// ../../../templates/base/head.tmpl
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\xc9\x80\xb8\x38\x0a\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x7f\x6f\xdb\x36\x10\xfd\x5f\x9f\xe2\xac\xd5\x95\x34\x47\x92\x9d\xb6\x43\x06\x5b\x2e\x3a\x37\xed\x02\x0c\x68\xd6\x5f\x5b\x17\xa4\x01\x2d\x9f\x64\xc6\x12\xa9\x92\x94\x14\xcf\xf1\x77\x1f\xa8\x1f\x8e\xe2\xa4\x5d\xb6\xfe\x65\xf2\xc8\xf7\xf8\xc8\x7b\x77\xd6\xa4\xf7\xf2\xcd\xec\xfd\xa7\xd3\x63\x58\xaa\x34\x99\x1a\x93\xf6\x07\xc9\x62\x6a\x4c\x52\x54\x04\x96\x4a\x65\x2e\x7e\xc9\x69\x11\x98\x33\xce\x14\x32\xe5\xbe\x5f\x67\x68\x42\x58\xcf\x02\x53\xe1\x95\xf2\x35\x74\x0c\xe1\x92\x08\x89\x2a\xf8\xf0\xfe\x95\x7b\x64\x82\x7f\x1f\xcb\x9f\xee\x87\x17\xee\x8c\xa7\x19\x51\x74\x9e\x74\x89\x4e\x8e\x03\x5c\xc4\x68\x7e\xeb\xec\xdf\x08\x8b\x73\x12\x77\x61\x21\xd3\x88\x9e\xeb\x66\xa1\xeb\xd6\x23\xa8\x09\x18\x49\x31\x30\x0b\x8a\x65\xc6\x85\xea\x40\x4a\xba\x50\xcb\x60\x81\x05\x0d\xd1\xad\x26\x07\x40\x19\x55\x94\x24\xae\x0c\x49\x82\xc1\xc8\x1b\x1e\x40\x4a\x19\x4d\xf3\xf4\x56\x88\x5c\xed\x87\x72\x89\xa2\x9a\x93\x79\x82\x01\xe3\xe6\x14\x5a\x1d\x69\x35\xf8\xcf\x5a\x6e\x33\xae\x51\x1e\xdc\x15\x77\x57\xc8\x1d\x1d\xfe\xed\xb3\xe7\x84\x2e\x72\x57\x52\x85\x6e\x81\x82\x46\x34\x24\x8a\x72\xd6\x91\xf2\xac\x3c\x9c\xaf\xe8\xd3\xbf\x87\xa2\x93\xbb\x1a\x1c\x73\x1e\x27\xf8\x4d\xf4\x8b\xd7\x97\x4f\xf3\xa1\x3c\x7e\xfd\xec\xdd\xb3\x93\xbf\xa2\xf2\x8f\x93\x5f\xc9\xf1\xcf\x47\xeb\xe8\xf5\x93\xa3\x11\xae\x47\xd1\xab\x97\x87\x6f\x7e\xc1\x75\x7a\xfa\xa9\xa2\xdf\xf4\x61\x9e\xf0\x70\x05\xfa\x18\x09\xfd\x6d\x9d\xba\x7a\xa6\x1f\x6e\xd3\x07\x64\x8b\x7a\x8f\x5e\x55\x54\x25\x38\xdd\xf4\xeb\x48\x35\xeb\x6f\x2b\x4c\x35\xd6\x98\x4d\xbf\x45\xf4\xb7\x13\xbf\x06\x18\x93\x84\xb2\x15\x2c\x05\x46\x81\xe9\x4b\x45\x14\x0d\xfd\x50\x4a\x7f\xce\xb9\x92\x4a\x90\xcc\x4b\x29\xf3\x42\x29\x9f\x17\xc1\x66\xf3\x11\x85\xa4\x9c\x6d\xb7\x26\x08\x4c\x02\x53\xaa\x75\x82\x72\x89\xa8\xcc\x07\x50\xb9\x6a\x89\x29\x7e\x3f\x61\x4a\x1e\xca\x60\x4c\x64\x28\x68\xa6\x40\x8a\xf0\x86\xe3\x52\xfa\x97\x5f\x72\x14\x6b\x77\xe4\x8d\x46\xde\xb0\x52\x74\xb9\x4f\x37\x9d\xf8\x35\x78\xba\x63\x51\xeb\x0c\x9b\x9a\xbe\x24\x05\xa9\xa3\xe6\xd4\xf0\x7d\x50\x1c\xca\xb2\x34\x0a\x22\x60\x99\x50\xa9\x20\x80\x92\xb2\x05\x2f\xbd\x84\xd7\x6e\xf0\x96\x5c\x2a\x6d\x18\x4f\x66\x09\x55\xb6\xe5\x59\xce\xb8\x02\x28\x22\x62\x54\xa7\x82\x2b\x1e\xf2\xe4\x1e\x64\xd6\x2c\x8d\x0d\x83\x46\x76\xc5\x7f\x36\x3c\x0f\x02\xab\x18\x59\x70\x7d\x0d\xdd\xc8\xe1\x9d\xc8\x13\xcb\xd9\x80\xb1\x05\x4c\x24\xc2\xc6\x00\x00\xf0\xfd\x0e\x4f\x2f\xb0\xca\xb2\xb4\x9c\x7a\x49\x2f\x6a\x51\xb9\xd0\x4a\xf6\xa4\x0d\x2c\xdf\x2f\xcb\xd2\xb3\x60\x70\xe7\x76\x02\x23\x4f\xe6\x73\xa9\x04\x65\xb1\xfd\xb5\x2b\x78\x09\xb2\x58\x2d\x07\x87\xce\x78\x77\xdc\x7d\x54\x10\x68\x05\xe3\x46\xed\xd6\xd8\x1a\xc6\x4d\x3e\x0c\xe3\xa6\x40\xea\x7c\xef\x2a\xa4\x99\xde\x53\x22\x9a\xa0\xe9\xde\x73\xbe\x58\x4f\xbb\x24\x8c\x14\x73\x22\xf4\xae\x3d\xd0\x6e\x47\x53\xc9\xf7\x6c\xf9\xba\xc9\x6e\xd7\xd0\x43\x0c\xf6\x55\x06\x57\x5b\x8f\x68\xf9\xff\x9b\xab\xaa\x9a\xef\x71\xb9\xf1\xc8\xb6\xbc\x2b\x57\x46\x5c\xa4\x96\xa3\x73\x9d\x52\x65\x47\x39\x0b\x75\xd6\x6c\x6c\x0c\x84\x5e\x26\xb0\x40\xa6\x5e\x62\x44\xf2\x44\xd9\x4d\xa6\xb5\xa9\x56\x25\x04\x50\xd3\xac\x4a\xcb\xf1\x0a\x92\xe8\xe5\x6a\x9d\x46\x60\xaf\xca\xc6\x1f\x93\x60\xb4\xf3\x23\xb4\xf5\x40\x12\x14\xca\xb6\x5e\x28\x48\x90\x48\x05\x87\x50\x72\xb1\x90\xbd\x5e\xcf\xda\xb9\x09\x40\xa0\xca\x05\x83\x88\x24\x12\xeb\xe8\xb6\x3d\xc0\xee\xad\xca\x0e\x6d\x47\x48\xc4\xc3\x5c\xda\xff\xc2\xd2\xde\xa2\x2e\x0d\xcb\x97\xbe\x05\x03\x40\x16\xf2\x05\x7e\x78\x7b\xa2\xff\xb7\x39\x43\xa6\xec\x55\xe9\xc0\x00\xac\x8b\x70\x78\x11\x0d\x2f\x46\x9e\xfe\x00\xb0\x6a\x96\x3d\xaf\x77\x6d\x7e\xfb\xc8\xad\x7e\x17\xa3\x7d\x5d\x90\x98\x60\xa8\x66\x44\x61\xcc\xc5\xda\xd6\x39\x6a\x6e\xf2\xc8\xb6\x7e\x88\x28\x5b\x5c\x84\xcd\xa2\xe5\x78\x3a\x79\xf5\x9e\x9b\xb7\x2f\x20\x80\xbd\x6a\xad\xfb\xd0\xf3\xf6\xf5\xf6\x0b\xb0\x38\x1b\x9e\x0f\xac\xe7\x2d\x6f\x60\x0d\x34\x65\xbd\xf7\xf4\xe3\x6c\xe6\x49\x54\x33\xce\x57\x14\x6d\xeb\xb6\x82\x83\xca\x44\x07\x70\xf4\xd3\xd3\xe1\xd0\x19\xeb\xea\xdd\xdd\x24\x46\xf5\xbb\x6e\xbe\xef\xea\x46\xa1\x3b\x62\x9b\x13\x2d\x53\x60\x0c\x01\x30\x2c\xe1\x2d\xc6\xc7\x57\x99\x6d\xda\x9f\xaf\x1f\x3b\xe6\xa0\xfa\xb3\x85\x81\x19\xd8\x67\x9f\x1f\x9f\xff\xe8\xd8\x8f\xaf\x1f\x39\x66\x9b\xb2\x0a\x7a\x4f\xeb\x94\x48\x44\xb8\x6c\x1a\x93\x3d\x72\xbc\x94\xa8\x70\x69\x0b\x8c\x5b\x24\x8d\x6c\xd1\x0b\x58\x9e\x24\x1d\x6b\x34\xb9\xc8\x19\xca\x90\x64\x68\x8b\xb3\xc3\x73\x67\xdc\x86\xf5\xe6\x06\x5d\x75\xa6\x6e\x6b\x9a\xf8\x75\x77\x99\x54\x9f\x7d\xd3\x7f\x02\x00\x00\xff\xff\xf2\xf8\x0c\x1d\x48\x0a\x00\x00"

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x51\x52\xd0\xab\xad\xe5\xe2\xca\x48\xcd\xc9\xc9\x57\x28\xcf\x2f\xca\x49\x51\x54\xb0\x52\xa8\xae\xd6\xf3\x4b\xcc\x4d\x05\xc9\x70\x61\x68\x4b\xcb\xcf\x2f\x49\x2d\x02\x6b\x04\x04\x00\x00\xff\xff\x2a\xe8\x39\xa0\x53\x00\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md":        readmeMd,
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl":   baseHeadTmpl,
	"index.tmpl":       indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl":   &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
