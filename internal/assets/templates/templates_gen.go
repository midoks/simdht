// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/README.md
// ../../../templates/base/footer.tmpl
// ../../../templates/base/head.tmpl
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\xc9\x80\xb8\x38\x0a\x00\x00\x00"

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe2\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\x03\x04\x00\x00\xff\xff\x2e\x92\xd9\x28\x11\x00\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x7f\x6f\xdb\x36\x10\xfd\x5f\x9f\xe2\xac\x15\x95\x34\x47\x92\x9d\xb6\x43\x06\x5b\x2e\x3a\x37\xed\x02\x0c\x68\xd6\x5f\x5b\x17\xa4\x01\x2d\x9f\x24\xc6\x14\xa9\x92\x27\x2b\x5e\xe2\xef\x3e\x50\xb2\x53\xe7\x47\xbb\x6e\xfd\xcb\xe6\x51\xef\xdd\xe3\xbd\xe3\x71\xdc\x7b\xfe\x6a\xfa\xf6\xc3\xf1\x21\x14\x54\x8a\x89\x33\xde\xfe\x20\x9b\x4f\x9c\x71\x89\xc4\xa0\x20\xaa\x42\xfc\x54\xf3\x65\xe2\x4e\x95\x24\x94\x14\xbe\x5d\x55\xe8\x42\xda\xad\x12\x97\xf0\x82\x62\x0b\x1d\x41\x5a\x30\x6d\x90\x92\x77\x6f\x5f\x84\x07\x2e\xc4\xf7\xb1\xfc\x19\xbe\x7b\x16\x4e\x55\x59\x31\xe2\x33\xb1\x4b\x74\x74\x98\xe0\x3c\x47\xf7\x6b\xb9\x7f\x63\x32\xaf\x59\xbe\x0b\x4b\xa5\x45\xf4\xc2\xb0\x4a\xc3\xb0\xfb\x07\x1d\x81\x64\x25\x26\xee\x92\x63\x53\x29\x4d\x3b\x90\x86\xcf\xa9\x48\xe6\xb8\xe4\x29\x86\xed\x62\x0f\xb8\xe4\xc4\x99\x08\x4d\xca\x04\x26\xc3\x68\xb0\x07\x25\x97\xbc\xac\xcb\x1b\x21\x76\x71\x3b\x54\x1b\xd4\xed\x9a\xcd\x04\x26\x52\xb9\x13\xd8\xea\x28\xdb\x3f\xff\x59\xcb\x4d\xc6\x15\x9a\xbd\xbb\xe2\xee\x0a\xb9\xa3\x23\xbe\x99\x7b\xc6\xf8\xbc\x0e\x0d\x27\x0c\x97\xa8\x79\xc6\x53\x46\x5c\xc9\x1d\x29\x4f\x9a\xfd\xd9\x82\x3f\xfe\x7b\xa0\x77\xbc\xeb\xc0\xb9\x52\xb9\xc0\xaf\xa2\x9f\xbd\x3c\x7f\x5c\x0f\xcc\xe1\xcb\x27\x6f\x9e\x1c\xfd\x95\x35\x7f\x1c\xfd\xca\x0e\x7f\x3e\x58\x65\x2f\x1f\x1d\x0c\x71\x35\xcc\x5e\x3c\xdf\x7f\xf5\x0b\xae\xca\xe3\x0f\x2d\xbd\x33\x26\x4e\x02\x27\x86\x97\xf3\x82\xc6\x71\xb7\x72\xc6\x82\xcb\x05\x14\x1a\xb3\xc4\x8d\x0d\x31\xe2\x69\x9c\x1a\x13\xcf\x94\x22\x43\x9a\x55\x51\xc9\x65\x94\x1a\xf3\x74\x99\x5c\x5e\xbe\x47\x6d\xb8\x92\xeb\xb5\x0b\x1a\x45\xe2\x1a\x5a\x09\x34\x05\x22\xb9\xdf\x40\x15\x52\x81\x25\x7e\x3f\x61\xc9\xbe\x95\xc1\x19\x9b\x54\xf3\x8a\xc0\xe8\xf4\x33\xc7\xb9\x89\xcf\x3f\xd5\xa8\x57\xe1\x30\x1a\x0e\xa3\x41\xab\xe8\xfc\x36\xdd\x64\x1c\x77\xe0\xc9\x35\x0b\xad\x2a\xdc\xdc\xc0\x73\xb6\x64\x5d\xd4\x9d\x38\x71\x0c\xa4\xa0\x69\x1a\x67\xc9\x34\x14\x82\x1b\x82\x04\x1a\x2e\xe7\xaa\x89\x84\xea\xbc\x8b\x0a\x65\xc8\xda\x1b\x99\x4a\x70\xf2\xbd\xc8\x0b\x46\x2d\x80\x98\xce\x91\x8e\xb5\x22\x95\x2a\x71\x0f\xb2\xda\x6c\x8d\x1c\x87\x67\x7e\xcb\x7f\x32\x38\x4d\x12\x6f\x39\xf4\xe0\xea\x0a\x76\x23\xfb\x77\x22\x8f\xbc\xe0\x12\x9c\x35\xa0\x30\x08\x97\x0e\x00\x40\x1c\xef\xf0\xf4\x12\xaf\x69\x1a\x2f\xe8\xb6\xec\xa6\x15\x55\x6b\xab\xe4\x96\xb4\xbe\x17\xc7\x4d\xd3\x44\x1e\xf4\xef\x9c\x4e\x63\x16\x99\x7a\x66\x48\x73\x99\xfb\x5f\x3a\x42\x24\x50\xe6\x54\xf4\xf7\x83\xd1\x75\xba\xfb\xa8\x20\xb1\x0a\x46\x1b\xb5\x6b\x67\xed\x38\x3b\x7e\xc4\x9b\xa1\x39\x53\xf3\xd5\xc4\x71\xbe\xec\xf3\xcd\x36\xfe\x16\x8f\xbf\xc8\x10\x5a\xf7\x99\x4d\xfc\xbf\xb9\xda\xc6\xfd\x9e\x46\x73\x1e\xf8\x5e\x74\x11\x9a\x4c\xe9\xd2\x0b\x6c\xb9\x4b\x4e\x7e\x56\xcb\xd4\x16\xce\xc7\x8d\x87\x18\x55\x1a\x97\x28\xe9\x39\x66\xac\x16\xe4\x6f\x8a\x6d\x7d\x5d\x34\x90\x40\x47\xb3\x68\xbc\x20\x5a\x32\x61\xb7\xdb\x7d\x9e\x81\xbf\x68\x36\x16\x8d\x93\xe1\x75\x4b\xc0\xb6\x25\x99\x40\x4d\xbe\xf7\x8c\x40\x20\x33\x04\xfb\xd0\x28\x3d\x37\xbd\x5e\xcf\xbb\x36\x14\x40\x23\xd5\x5a\x42\xc6\x84\xc1\x2e\xba\xde\x26\xf0\x7b\x8b\x66\x87\x76\x47\x48\xa6\xd2\xda\xf8\xff\xc2\xb2\x3d\x45\xd7\x9d\x5e\x6c\x62\x0f\xfa\x80\x32\x55\x73\x7c\xf7\xfa\xc8\x3e\x74\x4a\xa2\x24\x7f\xd1\x04\xd0\x07\xef\x2c\x1d\x9c\x65\x83\xb3\x61\x64\x5f\x4c\xaf\x63\xb9\xd5\x6e\xbb\x9d\x76\x33\xe5\xda\xd6\xc5\xd9\x56\x17\x0c\x0a\x4c\x69\xca\x08\x73\xa5\x57\xbe\xf5\x68\x73\x92\x07\xbe\xf7\x43\xc6\xe5\xfc\x2c\xdd\x6c\x7a\x41\x64\xcd\xeb\xbe\xf9\x5c\xfb\x25\x24\x70\xeb\xc2\x74\xa3\xe0\xe9\xb6\x7a\xb7\xef\xc0\xf2\x64\x70\xda\xf7\x9e\x6e\x79\x13\xaf\x6f\x29\xbb\x6f\x8f\xdf\x4f\xa7\x91\x41\x9a\x2a\xb5\xe0\xe8\x7b\x37\x15\xec\xb5\x4d\xb4\x07\x07\x3f\x3d\x1e\x0c\x82\x91\xbd\x40\xd7\x27\xc9\x91\x7e\xb7\xf3\xef\x4d\x77\x57\xed\x50\xda\x7a\x62\x65\x6a\xcc\x21\x01\x89\x0d\xbc\xc6\xfc\xf0\xa2\xf2\x5d\xff\xe3\xd5\xc3\xc0\xed\xb7\xaf\x13\xf4\xdd\xc4\x3f\xf9\xf8\xf0\xf4\xc7\xc0\x7f\x78\xf5\x20\x70\xb7\x96\xb5\xd0\x7b\xa6\x97\x41\xa6\xd3\x62\x33\x1b\xfc\x61\x10\x95\x8c\xd2\xc2\xd7\x98\x6f\x91\x3c\xf3\x75\x2f\x91\xb5\x10\x3b\xad\xb1\xf1\xa2\x96\x68\x52\x56\xa1\xaf\x4f\xf6\x4f\x83\xd1\x36\x6c\x3f\xde\xa0\xdb\xe1\xf0\x79\x3a\xfc\x13\x00\x00\xff\xff\x39\x6e\x14\xe8\x68\x09\x00\x00"

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xa3\x30\x10\xbd\xf3\x2b\xbc\x73\xe9\xc9\xa5\xe9\xee\x4a\x3d\x00\xa7\xae\xf6\x43\xaa\xb4\xd2\x56\x7b\xad\x8c\x19\xc0\x8a\xf1\x20\x3c\xb4\xa9\xaa\xfe\xf7\x95\x59\x48\x13\x42\x93\x26\x97\x78\x66\x9e\x9f\x9f\xfd\xc6\xf8\xe5\x85\xb1\x69\xad\x62\x14\x90\x2b\x8f\x71\x8d\xaa\x00\x71\xf9\xfa\x1a\x45\x51\x94\x34\xc8\x4a\x38\xd5\x60\x0a\x6b\x7c\x7e\xa2\xae\xf0\x20\x34\x39\x46\xc7\x29\x40\xb6\x87\x28\xd0\xeb\xce\xb4\x6c\xc8\xed\x83\xa2\x28\x29\xa9\x6b\x84\xb6\xca\xfb\x14\x36\xd2\x87\x10\x44\x83\x5c\x53\x91\xc2\xf7\x6f\xf7\x81\xaa\x30\x8f\x13\x24\xcc\x56\xc6\x61\x07\x59\x24\x84\x10\x43\xcd\x14\xe9\x45\x90\x87\xdd\xc5\x84\x2b\xcc\xa3\xf4\xa8\x3a\x5d\xcb\x9c\x36\x42\x93\x95\xb6\x92\x54\x96\x1e\x59\x5e\x4f\xf1\x4d\xd0\x20\xc6\x5f\x52\xaf\x02\x13\x58\xaa\x68\x64\xdf\x96\x7c\xab\xdc\x44\xed\x56\x90\xfd\x49\xe2\x90\x3a\x86\xba\x86\xec\xe7\x69\xd4\x17\xc8\xee\x4e\xa3\x3e\x43\x76\xfb\x21\xae\x1f\xa7\x51\x5f\x21\xbb\x9f\xa3\x92\xb8\x5e\xed\x44\xed\x04\xf6\x96\x2a\xe5\x20\x4b\xe2\x76\xa7\x5c\x98\xc7\xd9\x02\x3b\x06\x19\xd7\xf6\x2c\xab\x8e\xfa\x76\x76\x88\x03\xf2\x93\x94\x42\xf5\x4c\x9a\x9a\xd6\x22\x63\x0a\x54\x96\x20\xa4\x5c\xc0\x0e\x54\x4b\xe8\xd6\x2a\x8d\x35\xd9\x02\xbb\x14\x40\x08\x7e\x6e\x31\x05\xc6\x0d\xc3\x5b\x9f\x58\xb9\xf1\xf2\x66\xeb\xb4\x08\x9d\x25\x43\xfb\x74\x64\x45\x49\xba\xf7\x62\x23\xd7\x4f\x30\x75\xf1\xd3\x92\xdc\xdd\x93\xdb\xd9\x99\xcc\xd9\x2d\xc0\x87\x29\x79\xcf\x4c\xdb\x49\x39\x3b\x91\xb3\x93\x05\x96\xaa\xb7\x0c\xa3\x56\xdf\xe7\x8d\xe1\x77\x28\x0e\x56\xae\xec\x73\x5b\x1b\x4d\x4e\x6c\x47\x63\x73\x07\x6b\x0e\x0d\x7f\xb3\xf5\xbf\x98\x85\x8d\x2d\xb5\x49\x3c\x18\x7b\xc4\xd9\x92\xc2\x65\x5a\x3a\xa7\xde\xbe\xa3\xc0\x9a\x2c\x51\xa2\xee\xb0\x4c\x21\xf6\xf1\x5f\x53\x20\x3d\xe8\xab\x87\xf2\xea\x61\x75\x59\x73\x63\x21\x1b\x72\x49\xac\xb2\x24\xb6\xe6\x63\x34\xb7\xa4\xfb\x06\x1d\xcf\x98\xa6\xf4\x79\x64\x77\xbd\x37\x7a\xc6\x34\xe4\xce\xa3\xf9\xad\xf4\x5a\x55\x38\x23\x1a\xb3\x67\x2a\x32\xba\x56\x68\xc5\x2f\xa5\xd7\x9e\xdc\x5c\xdb\x7e\xf5\x38\xf5\x82\xf3\x73\xaf\x46\xdf\x17\xc2\x71\xb8\xfd\x0b\x57\x28\x7c\xb4\xa3\x83\xc7\xa1\x24\x62\xec\x86\xe7\xe1\x5f\x00\x00\x00\xff\xff\x91\x11\x95\xf3\x39\x06\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md":        readmeMd,
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl":   baseHeadTmpl,
	"index.tmpl":       indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl":   &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
