// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
// ../../../conf/locale/locale_en-US.ini
// ../../../conf/locale/locale_zh-CN.ini
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\xe4\xb6\x11\xbe\xf3\x29\x0a\x42\x0c\xcc\x00\x1a\x4d\xf7\x6c\xd0\xde\x74\x43\x87\x60\x13\xaf\x0d\x6c\x12\xc3\x3d\x0b\x03\x5e\x0c\xb4\x6c\xb2\x24\x31\x4d\xb1\x04\x92\xea\x9f\x3d\xe5\x96\x07\x08\x90\xb7\x48\xce\xb9\xe4\x6d\x8c\xe4\x35\x82\xa2\xa4\xde\x9e\x78\x02\xf8\x92\x93\x44\xb2\xea\xab\x62\xfd\x7c\x45\xd9\xf7\x95\x93\x1d\x42\x09\x59\x30\x9d\x6e\x63\x26\x76\x5e\x3a\xfd\x93\x5d\x3f\xb8\x6a\x08\xe8\x79\xcf\x13\x4d\x3b\x1d\xe9\x24\xa5\xf1\x90\x09\xf1\x41\xe3\x6e\x68\x9e\x44\x4f\x3e\x96\xab\xc5\x6a\x29\x84\xf8\x60\xa9\x79\x12\x1b\x78\x6c\x11\x2c\x35\x50\x93\xef\x64\x04\x34\xb1\x45\x0f\xd9\x1f\x03\xb9\x0c\xc8\x43\x16\xf1\x14\x33\x31\x1d\x97\xf3\x9a\x4d\x55\xbd\x8c\x2d\x6f\x59\x6a\x02\x9b\xf1\xa8\x4d\x78\x02\xb1\x81\x10\xc9\x23\x04\x0c\xc1\x90\x13\xe8\xe4\xce\xb2\x3f\xb5\xb4\x01\x85\xd4\xda\x63\x08\xac\xb9\x7c\xf8\xb2\x58\x14\x8b\x62\xb9\x5e\xbd\xfa\xf2\x57\x99\xe8\x65\x08\x47\xf2\x9a\xcf\x32\xa1\x77\xfc\x5d\x30\xf4\x04\x35\x7b\x3c\x2d\xa1\xf7\x74\x30\x1a\x7d\x7e\x71\xbc\xc3\x8e\xfc\x39\xcb\x21\xab\x8d\xc5\x2c\x4f\x77\x48\x8e\x65\x85\x98\xc5\xa1\x84\x51\x6e\x82\x53\xe4\x6a\xd3\x0c\x5e\x46\x06\xad\xc9\x83\xc7\xd0\xa3\x8a\xe6\x80\x17\x1b\x6b\xb1\x81\xbb\x49\x6f\x0d\x9a\x30\x80\xa3\x08\x0e\x51\x83\x74\xe7\x09\x04\xce\x18\x93\x20\x9b\x5f\x5f\x1c\xe5\x15\x70\xbc\x72\xc0\xa2\x29\xe0\xa3\x96\x51\xde\x4f\xa7\xe1\x63\xd2\x48\x5e\xae\xc1\x61\x3c\x92\xdf\x97\x51\xf5\x39\x87\xaa\x4c\xb1\xc9\xe7\xd0\x94\x9d\x54\xd2\x93\xcb\xf5\xae\x5c\xe4\x3d\x91\xad\x82\xf9\x84\xe5\x72\xb1\xc8\x8d\xb6\x58\x45\xd3\x21\x0d\xb1\x5c\xbe\x5e\x5c\x2e\x5c\x4d\xce\x95\xf0\xcc\xee\xe5\xfa\xb4\x37\x08\xa9\xb4\x22\x4d\xc9\x8b\x57\x61\x36\x1a\x5d\x34\xb5\x41\x5f\x88\x51\x78\xae\x43\x53\x59\xb3\xc7\xca\x74\xd2\x58\xb1\x81\xef\x5b\x4c\x69\x60\x14\x8c\x33\xb0\x71\xf0\xf5\xe3\xe3\xb7\x5b\x20\x67\xcf\x17\x84\x80\x6a\xf0\x8c\x11\xfd\x80\x93\x27\x6f\xdf\x80\x71\x11\xfd\x41\x5a\xd6\x0a\xa8\xc8\xe9\x90\x32\x32\xfb\xc2\x17\x28\x44\xa3\xaa\x8b\x60\x09\xaf\x56\x8b\xc5\x84\xd0\xc9\x93\xe9\x86\x0e\xac\xa9\x11\x38\x14\xff\x8d\x23\x67\xa4\x42\x74\xf2\x54\xb1\x5c\x0a\x19\x94\xf0\x7a\xf5\xcb\x0b\xce\x75\x4c\x58\xed\xcd\xf6\xbb\xaf\x20\xd2\x1e\x5d\x21\x54\xf0\x75\xf5\x3c\x0e\x15\xef\x71\x5b\x29\xa9\x5a\x9c\xcb\x34\x2d\x40\x6a\xd9\xc7\x97\x6b\x74\x2c\xcc\xb1\x48\x3b\xec\x92\x7c\x56\x88\x49\xe3\xba\x4c\xbf\xa2\xcf\x8a\x29\x8e\xf9\xff\x08\x56\x21\xae\x02\xb3\x7c\x58\xcc\xba\xa3\x29\x90\x4e\x5f\x99\xca\xb9\x6a\x1d\x17\x3a\x39\x68\x29\x44\x98\x9a\x73\xfd\xff\xaa\xc8\xa9\x87\x92\xf9\x35\x7c\xfc\x4c\x00\xcb\xe5\xc3\x72\xf9\x51\x24\x27\xd8\xf1\x67\xfb\x42\x7c\x38\xe2\x6e\x0e\x6b\xef\x29\x92\x22\x0b\xb1\x95\x11\x4c\x80\x21\xa0\x1e\x6b\xce\x1f\x10\xb4\xf1\xa8\x22\x44\x2f\xeb\xda\x28\xde\xe7\x5a\x96\x7d\x6f\x8d\x4a\x1d\x5e\x88\x0d\xbc\x19\xbc\x47\x17\xed\x19\xc2\xd0\x33\x31\x06\xc8\xda\x18\x7b\xce\x0a\x7f\x43\xa2\x10\xd5\x98\x29\x64\x83\x33\xa7\x91\x41\x46\xd3\x25\xb0\xd4\xe4\xd0\xcc\x68\x91\x60\x87\x60\x4d\x88\xe8\x50\xc3\xee\xfc\x53\xcb\xac\x55\xb1\x3c\x94\xb0\x48\x57\x5c\x88\xf9\x5a\xe4\x23\xb8\xa1\xdb\x8d\x0d\xf4\xb3\x90\x92\x0e\x13\xe9\xe2\x35\xf3\xa4\xd8\xc0\x5b\x74\xe8\x65\x44\x08\x11\xfb\x94\xc7\x3f\x78\xa8\x3d\x75\x20\xa1\xe8\xeb\xd3\x48\x45\x78\x62\x4d\xd4\xe3\x09\x63\x7f\x6f\x9c\xa6\x63\x00\x85\x9e\x5b\x5d\x8d\x10\xcc\x04\x37\x9a\xc4\x26\x71\x5d\x4d\xbe\xc1\xc8\xce\x8d\xfa\x49\xb1\xf7\xe6\xc0\xc2\x7b\x3c\xdf\xb2\xb9\x5f\x00\xf5\xe8\x42\xb0\xd0\xef\x55\x58\x3e\xc0\x9d\x71\x09\x35\x59\xbf\xa3\x21\x4e\x2b\xec\xe0\xce\xd1\x1e\xcf\xe1\xe7\x69\xed\xf1\x3c\x2b\xf1\x41\xe0\x1f\x8d\x41\xf0\xa2\x4a\xb7\x2a\x41\x0d\x21\x52\x77\x9f\x32\x78\x3f\x9b\x11\x7b\x3c\xbf\x28\x30\x21\xce\x09\xe8\x8c\x4b\xdc\x21\xad\xa5\x23\x6a\x78\x7c\xb7\x85\x03\x7a\x26\x8b\x1c\xd4\x0b\x05\xf3\xf8\x6e\xbb\x5c\x70\xa1\xf0\xcf\x72\xfe\x79\xc8\xf2\xb1\x66\x78\xf1\x2a\x2b\x44\xb4\xa1\xea\x8c\xab\x26\x2c\x28\x21\x89\x71\x67\xa6\xb1\x80\xbe\x33\x23\xb9\x1d\x5b\x74\x53\x15\xcf\xe5\x7b\x30\x12\xde\x3b\x73\x02\x4d\x9d\xe4\x36\x27\xb5\xc7\x58\x08\x2e\xc8\x6a\x5c\x54\x57\x08\x25\xac\x56\x2b\xb1\x81\x77\xa4\xa4\x85\x9b\xdf\xfc\xee\x87\x5b\x78\xff\xdd\xbb\xc4\x61\xdc\xc4\xe8\x03\xdc\xa4\x11\xb4\xdd\x7e\x0d\x43\xaf\x65\xc4\x5b\x90\x4a\x31\x29\xba\x06\x8e\xb8\x4b\x0e\x18\x85\xdc\x26\xdf\x38\xe8\xb8\x23\x95\x0c\x18\xe0\x4c\x03\x68\xfa\x3c\xf6\x22\x81\x6a\xa5\x6b\xc6\x69\xa1\xb1\x96\x83\x8d\x70\x90\x76\x48\xca\xbf\xb6\x4c\x62\x26\x26\xbe\x02\x53\xb3\xbe\x4f\x76\xd3\x15\x3d\x70\xfe\xb8\x7f\x19\x30\xcd\x1b\x26\x53\x19\xd2\xb4\x48\x87\x85\xb0\x7c\x8f\x2a\x3d\x37\x06\xcf\x6d\xf7\xc5\xcd\xdc\x83\xb7\x61\x7d\x7f\xff\xc5\xcd\xa5\xa3\x6e\xc3\x7a\x5a\x71\x7a\x6e\xc3\xbd\x78\x3e\x91\xb4\x09\xe9\x1d\x62\xa9\x69\xf8\xaa\xc6\x81\xa7\x21\xf2\x50\x9b\x8e\xaa\x71\x5d\xf1\x83\xe8\x32\x97\xae\x10\xa6\x87\xcc\x55\x1b\x82\xc5\x03\x5a\x78\xfb\xc3\x37\xdf\x82\xa2\xae\xf7\xf3\x6c\x19\x45\xab\xe6\x93\xe9\x2f\x0f\x9f\x17\xc1\x22\x81\x25\xa9\x41\x86\x80\x31\xc0\x8d\x29\xb0\x80\x8c\xe7\x35\xd7\x53\xc4\xae\xb7\x32\x62\xa2\xa3\x7e\xd8\x59\xa3\xb2\xdb\xb1\x69\xb5\x09\x7b\x30\x2e\x44\x94\x1a\xa8\x06\xec\x76\xa8\x35\x93\x85\x71\xe3\x90\x64\xdc\x6a\xc4\xad\x58\xa5\x4a\x2a\x57\xde\xa4\xc7\x9f\x74\x9a\xa3\xd1\xcb\x06\x2f\x95\x22\x1d\xb9\x73\x47\x43\xa2\x56\x1f\xf2\x94\x9d\x94\x57\x08\x2d\x0d\x56\xa7\x94\x19\xa7\xec\xa0\x39\x46\x61\xd8\xa5\xc7\xe0\x4c\xc8\xad\x74\xda\x7e\xe6\x2d\x8f\x5c\xfa\x89\xb8\x4f\xe7\x42\x4c\x26\xa7\x84\xde\xf3\xd8\x34\xcb\xd7\xee\x89\x0f\x1a\x7e\x17\xa2\xbb\x7b\xbf\xcd\x3f\xb5\x77\x6f\x7e\x2f\x78\xc0\xf2\xde\x6f\x5d\x63\x4d\x68\xf3\x7f\xff\xfd\x4f\x3f\xfe\xf3\x2f\x3f\xfe\xe3\x6f\xff\xfa\xeb\x9f\xc5\x06\xde\x33\xf5\xb3\xcb\x5c\xc8\x3c\x68\x7a\xa3\xf6\xe8\x47\xc4\x82\x37\x19\xf4\x49\x24\xc8\x04\x2d\x12\x2e\x94\xf0\xa9\x15\xe2\x03\x71\x3a\x9e\x44\x68\xe9\x58\xd5\x44\x9c\xfd\xf4\xd0\xe6\x90\xcc\x91\xda\xc0\xb6\xa5\xe3\xf8\x9a\xa0\x1a\xe6\x9c\x00\x9e\x50\x0d\xa9\x0a\x8c\x4b\xf7\x1c\x01\x9e\x81\xcd\xc2\x55\x4a\xc6\xf4\xd0\x48\x95\x25\xc4\x7f\x02\x00\x00\xff\xff\x54\x5d\x1e\xf7\xe6\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_zhCnIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func confLocaleLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_zhCnIni,
		"conf/locale/locale_zh-CN.ini",
	)
}

func confLocaleLocale_zhCnIni() (*asset, error) {
	bytes, err := confLocaleLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_zh-CN.ini", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf":                confAppConf,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_zh-CN.ini": confLocaleLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_zh-CN.ini": &bintree{confLocaleLocale_zhCnIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
