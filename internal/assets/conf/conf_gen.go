// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
// ../../../conf/locale/locale_en-US.ini
// ../../../conf/locale/locale_zh-CN.ini
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\xe3\xb8\x11\xbe\xf3\x29\x0a\x42\x16\xe8\x06\xd4\x6a\xbb\x27\xe8\x9d\xd8\xd0\x21\x98\x64\x67\x17\x98\x24\x8b\x75\x0f\x16\xd8\x46\x43\x43\x93\x25\x89\x31\xc5\x12\x48\xca\x3f\x73\xca\x2d\x0f\x10\x20\x6f\x91\x9c\x73\xc9\xdb\x2c\x92\xd7\x08\x8a\x92\x3c\xee\x49\x07\x98\x4b\x4e\x36\xa9\xaa\xaf\x8a\x55\x5f\xfd\xc8\xbe\xaf\x9c\xec\x10\x4a\xc8\x4c\x27\x8d\xcd\xc4\xd6\x4b\xa7\x3f\xbf\xf4\x83\xab\x86\x80\xfe\xb3\xab\x8e\x74\x92\xd2\xb8\xcf\x84\x78\xb4\xd4\x3c\x89\x35\x3c\xb4\x08\x96\x1a\xa8\xc9\x77\x32\x02\x9a\xd8\xa2\x87\xec\x8f\x81\x5c\x06\xe4\x21\x8b\x78\x8c\x99\x98\x3e\x97\xf3\xd9\x13\xc5\xaa\x97\xb1\xe5\x2b\x4b\x4d\xc8\x84\x10\x8f\x1e\xb5\x09\x4f\x20\xd6\x10\x22\x79\x84\x80\x21\x18\x72\x02\x9d\xdc\x5a\x36\x5e\x4b\x1b\x50\x48\xad\x3d\x86\xc0\xaa\xcb\xbb\xaf\x8b\x45\xb1\x28\x96\xab\xfb\x57\x5f\xff\x2a\x13\xbd\x0c\xe1\x40\x5e\xf3\xb7\x4c\xe8\x2d\xff\x2e\xd8\xdd\x09\x6a\x76\x79\x3a\x42\xef\x69\x6f\x34\xfa\xfc\xec\x79\x87\x1d\xf9\x53\x96\x43\x56\x1b\x8b\x59\x9e\x1e\x91\x1c\xcb\x0a\x31\x8b\x43\x09\xa3\xdc\x04\xa7\xc8\xd5\xa6\x19\xbc\x8c\x0c\x5a\x93\x07\x8f\xa1\x47\x15\xcd\x1e\xcf\x36\x56\x62\x0d\x37\x93\xde\x0a\x34\x61\x00\x47\x11\x1c\xa2\x06\xe9\x4e\x13\x08\x9c\x30\x26\x41\x36\xbf\x3a\x3b\xca\x27\xe0\x80\xe5\x80\x45\x53\xc0\x07\x2d\xa3\xbc\x9d\xbe\x86\x0f\x49\x23\x79\xb9\x02\x87\xf1\x40\x7e\x57\x46\xd5\xe7\x1c\xaa\x32\xc5\x26\x9f\x43\x53\x76\x52\x49\x4f\x2e\xd7\xdb\x72\x91\xf7\x44\xb6\x0a\xe6\x23\x96\xcb\xc5\x22\x37\xda\x62\x15\x4d\x87\x34\xc4\x72\xf9\x7a\x71\x7e\x70\x35\x39\x57\xc2\x33\xbb\xe7\xe7\xd3\xce\x20\x24\x1e\x45\x9a\x92\x17\x2f\xc2\x6c\x34\xba\x68\x6a\x83\xbe\x10\xa3\xf0\x4c\x3a\x53\x59\xb3\xc3\x2a\xf1\x4c\xac\xe1\xc7\x16\x53\x1a\x18\x05\xe3\x0c\x6c\x1c\x7c\xfb\xf0\xf0\xfd\x06\xc8\xd9\xd3\x19\x21\xa0\x1a\x3c\x63\x44\x3f\xe0\xe4\xc9\xdb\x37\x60\x5c\x44\xbf\x97\x96\xb5\x02\x2a\x72\x3a\xa4\x8c\xcc\xbe\xf0\x03\x0a\xd1\xa8\xea\x2c\x58\xc2\xab\xfb\xc5\x62\x42\xe8\xe4\xd1\x74\x43\x07\xd6\xd4\x08\x1c\x8a\xcf\x71\xe4\x8c\x54\x88\x4e\x1e\x2b\x96\x4b\x21\x83\x12\x5e\xdf\xff\xf2\x8c\x73\x19\x13\x56\x7b\xb3\xf9\xe1\x1b\x88\xb4\x43\x57\x08\x15\x7c\x5d\x3d\x8f\x43\xc5\x77\x5c\x03\x4a\xaa\x16\x67\x9a\xa6\x03\x48\x2d\xfb\xf8\x32\x47\x47\x62\x8e\x24\xed\xb0\x4b\xf2\x59\x21\x26\x8d\x4b\x9a\x7e\x43\x9f\x14\x53\x1c\xf3\xff\x11\xac\x42\x5c\x04\x66\x79\xb7\x98\x75\x47\x53\x20\x9d\xbe\x30\x95\x33\x6b\x1d\x13\x9d\x1c\xb4\x14\x22\x4c\xc5\xb9\xfa\x7f\x31\x72\xaa\xa1\x64\x7e\x05\x1f\x3e\x35\x80\xe5\xf2\x6e\xb9\xfc\x20\x92\x13\xec\xf8\xb3\x7b\x21\x1e\x0f\xb8\x9d\xc3\xda\x7b\x8a\xa4\xc8\x42\x6c\x65\x04\x13\x60\x08\xa8\x47\xce\xf9\x3d\x82\x36\x1e\x55\x84\xe8\x65\x5d\x1b\xc5\xf7\xcc\x65\xd9\xf7\xd6\xa8\x54\xe1\x85\x58\xc3\x9b\xc1\x7b\x74\xd1\x9e\x20\x0c\x7d\x4f\x3e\x06\xc8\xda\x18\x7b\xce\x0a\xff\x86\xd4\x42\x54\x63\xa6\x90\x0d\xce\x1c\xc7\x0e\x32\x9a\x2e\x81\xa5\x26\x87\xe6\x8e\x16\x09\xb6\x08\xd6\x84\x88\x0e\x35\x6c\x4f\xff\x6d\x99\xb5\x2a\x96\x87\x12\x16\xe9\x89\x0b\x31\x3f\x8b\x7c\x04\x37\x74\xdb\xb1\x80\xbe\x08\x29\xe9\x70\x23\x5d\xbc\xe6\x3e\x29\xd6\xf0\x16\x1d\x7a\x19\x11\x42\xc4\x3e\xe5\xf1\x0f\x1e\x6a\x4f\x1d\x48\x28\xfa\xfa\x38\xb6\x22\x3c\xb2\x26\xea\xf1\x0b\x63\xff\x68\x9c\xa6\x43\x00\x85\x9e\x4b\x5d\x8d\x10\xdc\x09\xae\x34\x89\x75\xea\x75\x35\xf9\x06\x23\x3b\x37\xea\x27\xc5\xde\x9b\x3d\x0b\xef\xf0\x74\xcd\xe6\x7e\x01\xd4\xa3\x0b\xc1\x42\xbf\x53\x61\x79\x07\x37\xc6\x25\xd4\x64\xfd\x86\x86\x38\x9d\xb0\x83\x1b\x47\x3b\x3c\x85\x2f\xd3\xda\xe1\x69\x56\xe2\x0f\x81\xff\x68\x0c\x82\x0f\x55\x7a\x55\x09\x6a\x08\x91\xba\xdb\x94\xc1\xdb\xd9\x8c\xd8\xe1\xe9\x45\x81\x09\x71\x4e\x40\x67\x5c\xea\x1d\xd2\x5a\x3a\xa0\x86\x87\x77\x1b\xd8\xa3\xe7\x66\x91\x83\x7a\x81\x30\x0f\xef\x36\xcb\x05\x13\x85\xff\x2c\xe7\x3f\x77\x59\x3e\x72\x86\x0f\xaf\xb2\x42\x44\x1b\xaa\xce\xb8\x6a\xc2\x82\x12\x92\x18\x57\x66\x1a\x0b\xe8\x3b\x33\x36\xb7\x43\x8b\x6e\x62\xf1\x4c\xdf\xbd\x91\xf0\xde\x99\x23\x68\xea\x24\x97\x39\xa9\x1d\xc6\x42\x30\x21\xab\xf1\x50\x5d\x20\x94\x70\x7f\x7f\x2f\xd6\xf0\x8e\x94\xb4\x70\xf5\x9b\xdf\xfd\x74\x0d\xef\x7f\x78\x97\x7a\x18\x17\x31\xfa\x00\x57\x69\x04\x6d\x36\xdf\xc2\xd0\x6b\x19\xf1\x1a\xa4\x52\xdc\x14\x5d\x03\x07\xdc\x26\x07\x8c\x42\x2e\x93\xef\x1c\x74\x5c\x91\x4a\x06\x0c\x70\xa2\x01\x34\x7d\x1a\x7b\x91\x40\xb5\xd2\x35\xe3\xb4\xd0\x58\xcb\xc1\x46\xd8\x4b\x3b\x24\xe5\x5f\x5b\x6e\x62\x26\xa6\x7e\x05\xa6\x66\x7d\x9f\xec\xa6\x27\x7a\xe0\xfc\x71\xfd\x32\x60\x9a\x37\xdc\x4c\x65\x48\xd3\x22\x7d\x2c\x84\xe5\x77\x54\x69\xdf\x18\x3c\x97\xdd\x57\x57\x73\x0d\x5e\x87\xd5\xed\xed\x57\x57\xe7\x8a\xba\x0e\xab\xe9\xc4\xe9\xb9\x0e\xb7\xe2\xf9\x44\xd2\x26\xa4\x3d\xc4\x52\xd3\xf0\x53\x8d\x03\x4f\x43\xe4\xa1\x36\x7d\xaa\xc6\x73\xc5\x1b\xd1\x79\x2e\x5d\x20\x4c\x8b\xcc\x45\x19\x82\xc5\x3d\x5a\x78\xfb\xd3\x77\xdf\x83\xa2\xae\xf7\xf3\x6c\x19\x45\xab\xe6\xa3\xe9\xcf\x8b\xcf\x8b\x60\x91\xc0\x92\xd4\x20\x43\xc0\x18\xe0\xca\x14\x58\x40\xc6\xf3\x9a\xf9\x14\xb1\xeb\xad\x8c\x98\xda\x51\x3f\x6c\xad\x51\xd9\xf5\x58\xb4\xda\x84\x1d\x18\x17\x22\x4a\x0d\x54\x03\x76\x5b\xd4\x9a\x9b\x85\x71\xe3\x90\x64\xdc\x6a\xc4\xad\x58\xa5\x4a\x2a\x17\xde\xa4\xed\x4f\x3a\xcd\xd1\xe8\x65\x83\x67\xa6\x48\x47\xee\xd4\xd1\x90\x5a\xab\x0f\x79\xca\x4e\xca\x2b\x84\x96\x06\xab\x53\xca\x8c\x53\x76\xd0\x1c\xa3\x30\x6c\xd3\x36\x38\x37\xe4\x56\x3a\x6d\x3f\xf5\x2d\x8f\x4c\xfd\xd4\xb8\x8f\xa7\x42\x4c\x26\xa7\x84\x72\x9a\x78\x7d\x80\x20\xf7\x08\xd4\xc7\x54\x6e\x33\x99\xb2\x56\x7a\x9d\x1c\xcf\x72\xb8\xa2\x22\x42\xa6\xb7\xd9\xb5\x60\x8d\x8a\x35\xd2\x62\x5b\x9e\xa5\x84\x78\x34\xcb\xd7\xee\x89\x8d\x34\xbc\x63\xa2\xbb\x79\xbf\xc9\x3f\xb6\x37\x6f\x7e\x2f\x78\x58\xf3\xdd\x6f\x5d\x63\x4d\x68\xf3\x7f\xff\xfd\x4f\x3f\xff\xf3\x2f\x3f\xff\xe3\x6f\xff\xfa\xeb\x9f\xc5\x1a\xde\xf3\x18\xe1\xe7\x73\x51\xf0\xd0\xea\x8d\xda\xa1\x1f\x11\x0b\xbe\x64\xd0\x27\x91\x20\x13\xb4\x48\xb8\x50\xc2\xc7\x56\x88\x47\xe2\xd4\x3e\x89\xd0\xd2\xa1\xaa\x89\x98\x49\x69\x43\xe7\xf0\xce\x51\x5f\xc3\xa6\xa5\xc3\xb8\x99\x50\x0d\x73\x7e\x01\x8f\xa8\x86\xc4\x28\xe3\x52\xcc\x46\x80\x67\x60\xb3\x70\x95\x12\x3b\x2d\x2d\x89\xa5\xff\x09\x00\x00\xff\xff\x61\xaa\x06\x70\x1c\x0c\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_zhCnIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func confLocaleLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_zhCnIni,
		"conf/locale/locale_zh-CN.ini",
	)
}

func confLocaleLocale_zhCnIni() (*asset, error) {
	bytes, err := confLocaleLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_zh-CN.ini", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf":                confAppConf,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_zh-CN.ini": confLocaleLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_zh-CN.ini": &bintree{confLocaleLocale_zhCnIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
